pipeline {
    agent any

    environment {
        DEV1_BRANCH = 'dev1'
        DEV2_BRANCH = 'dev2'
        DEV3_BRANCH = 'dev3'
        STAGING1_BRANCH = 'staging1'

        ANSIBLE_PLAYBOOK = 'ansible/deploy.yml'
        ANSIBLE_VAULT_PASSWORD_ID = 'ansible_vault_password'
        
        GIT_REPO_URL = 'https://github.com/chetan-patil7/ruby-hello-world.git'
    }

    stages {
        stage('Checkout & Branch Detection') {
            steps {
                checkout scm
                script {
                    if (env.BRANCH_NAME) {
                        env.DETECTED_BRANCH = env.BRANCH_NAME
                    } else if (env.GIT_BRANCH) {
                        env.DETECTED_BRANCH = env.GIT_BRANCH.replaceFirst(/^origin\//, '')
                    } else {
                        def branchName = sh(
                            script: "git branch -r --contains HEAD | grep origin | head -1 | sed 's/.*origin\\///'",
                            returnStdout: true
                        ).trim()
                        env.DETECTED_BRANCH = branchName
                    }

                    echo "‚úÖ Detected branch: ${env.DETECTED_BRANCH}"
                }
            }
        }

        stage('Determine Target Server') {
            steps {
                script {
                    switch(env.DETECTED_BRANCH) {
                        case DEV1_BRANCH:
                            env.TARGET_SERVER = 'dev1-server'
                            env.RAILS_ENV = 'development1'
                            env.ANSIBLE_LIMIT = 'dev1_servers'
                            env.ANSIBLE_INVENTORY = 'ansible/inventory/dev/hosts'
                            env.DEPLOY_TYPE = 'DEVELOPMENT'
                            break
                        case DEV2_BRANCH:
                            env.TARGET_SERVER = 'dev2-server'
                            env.RAILS_ENV = 'development2'
                            env.ANSIBLE_LIMIT = 'dev2_servers'
                            env.ANSIBLE_INVENTORY = 'ansible/inventory/dev/hosts'
                            env.DEPLOY_TYPE = 'DEVELOPMENT'
                            break
                        case DEV3_BRANCH:
                            env.TARGET_SERVER = 'dev3-server'
                            env.RAILS_ENV = 'development3'
                            env.ANSIBLE_LIMIT = 'dev3_servers'
                            env.ANSIBLE_INVENTORY = 'ansible/inventory/dev/hosts'
                            env.DEPLOY_TYPE = 'DEVELOPMENT'
                            break
                        case STAGING1_BRANCH:
                            env.TARGET_SERVER = 'staging1-server'
                            env.RAILS_ENV = 'staging1'
                            env.ANSIBLE_LIMIT = 'staging1_servers'
                            env.ANSIBLE_INVENTORY = 'ansible/inventory/staging/hosts'
                            env.DEPLOY_TYPE = 'STAGING'
                            break
                        default:
                            error("‚ùå Branch '${env.DETECTED_BRANCH}' is not configured for deployment")
                    }

                    echo "üöÄ Deployment Configuration:"
                    echo "Branch: ${env.DETECTED_BRANCH}"
                    echo "Deploy Type: ${env.DEPLOY_TYPE}"
                    echo "Target server: ${env.TARGET_SERVER}"
                    echo "Rails environment: ${env.RAILS_ENV}"
                }
            }
        }

        stage('Setup Ruby Environment') {
            steps {
                script {
                    echo "üîß Setting up Ruby environment for testing..."
                    sh """
                        # Check Ruby environment
                        echo "Ruby version: \$(ruby --version)"
                        echo "Bundler version: \$(bundle --version)"
                        
                        # Install gems for testing (in local directory)
                        if [ -f Gemfile ]; then
                            echo "üì¶ Installing gems for testing..."
                            bundle install --path vendor/bundle --jobs 4
                        else
                            echo "‚ö†Ô∏è No Gemfile found - skipping bundle install"
                        fi
                    """
                }
            }
        }

        stage('Code Quality Checks') {
            parallel {
                stage('RuboCop - Style & Syntax') {
                    steps {
                        script {
                            echo "üîç Running RuboCop for style and syntax checks..."
                            sh """
                                if [ -f Gemfile ]; then
                                    # Check if RuboCop is available
                                    if bundle exec rubocop --version &>/dev/null; then
                                        echo "‚úÖ RuboCop found, running checks..."
                                        
                                        # Create RuboCop output directory
                                        mkdir -p reports
                                        
                                        # Run RuboCop with detailed output
                                        bundle exec rubocop \\
                                            --format progress \\
                                            --format json --out reports/rubocop.json \\
                                            --format html --out reports/rubocop.html \\
                                            . || echo "‚ö†Ô∏è RuboCop found issues (non-blocking)"
                                        
                                        echo "üìä RuboCop Summary:"
                                        bundle exec rubocop --format offenses . || true
                                    else
                                        echo "‚ö†Ô∏è RuboCop not available in Gemfile - installing temporarily..."
                                        gem install rubocop
                                        rubocop --format progress . || echo "‚ö†Ô∏è RuboCop found issues"
                                    fi
                                else
                                    echo "‚ö†Ô∏è No Gemfile found - using system RuboCop if available"
                                    if command -v rubocop &> /dev/null; then
                                        rubocop --format progress . || echo "‚ö†Ô∏è RuboCop found issues"
                                    else
                                        echo "‚ùå RuboCop not available"
                                    fi
                                fi
                            """
                        }
                    }
                    post {
                        always {
                            // Archive RuboCop reports
                            archiveArtifacts artifacts: 'reports/rubocop.*', allowEmptyArchive: true
                        }
                    }
                }

                stage('Brakeman - Security Scan') {
                    steps {
                        script {
                            echo "üîí Running Brakeman security analysis..."
                            sh """
                                if [ -f Gemfile ]; then
                                    if bundle exec brakeman --version &>/dev/null; then
                                        echo "‚úÖ Brakeman found, running security scan..."
                                        
                                        mkdir -p reports
                                        
                                        # Run Brakeman security scan
                                        bundle exec brakeman \\
                                            --format json --output reports/brakeman.json \\
                                            --format html --output reports/brakeman.html \\
                                            --format text \\
                                            --no-pager \\
                                            . || echo "‚ö†Ô∏è Brakeman found security issues (non-blocking)"
                                        
                                        echo "üîí Brakeman Summary:"
                                        bundle exec brakeman --format text --no-pager . || true
                                    else
                                        echo "‚ö†Ô∏è Brakeman not available - installing temporarily..."
                                        gem install brakeman
                                        brakeman --format text --no-pager . || echo "‚ö†Ô∏è Security issues found"
                                    fi
                                else
                                    echo "‚ö†Ô∏è No Rails application detected for Brakeman scan"
                                fi
                            """
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'reports/brakeman.*', allowEmptyArchive: true
                        }
                    }
                }

                stage('Ruby Syntax Check') {
                    steps {
                        script {
                            echo "‚úÖ Checking Ruby syntax..."
                            sh """
                                echo "üîç Checking Ruby syntax for all .rb files..."
                                
                                # Find and check all Ruby files
                                find . -name "*.rb" -not -path "./vendor/*" -not -path "./tmp/*" | while read file; do
                                    echo "Checking: \$file"
                                    if ! ruby -c "\$file" >/dev/null 2>&1; then
                                        echo "‚ùå Syntax error in: \$file"
                                        ruby -c "\$file"
                                        exit 1
                                    fi
                                done
                                
                                echo "‚úÖ All Ruby files have valid syntax"
                            """
                        }
                    }
                }

                stage('Bundle Audit - Vulnerability Check') {
                    steps {
                        script {
                            echo "üõ°Ô∏è Checking for vulnerable gems..."
                            sh """
                                if [ -f Gemfile ]; then
                                    # Install bundle-audit if not available
                                    if ! bundle exec bundle-audit --version &>/dev/null; then
                                        echo "üì¶ Installing bundle-audit..."
                                        gem install bundle-audit
                                    fi
                                    
                                    echo "üîç Updating vulnerability database..."
                                    bundle-audit update
                                    
                                    echo "üõ°Ô∏è Checking for vulnerable gems..."
                                    mkdir -p reports
                                    
                                    bundle-audit check > reports/bundle-audit.txt || echo "‚ö†Ô∏è Vulnerable gems found (non-blocking)"
                                    cat reports/bundle-audit.txt
                                else
                                    echo "‚ö†Ô∏è No Gemfile found - skipping vulnerability check"
                                fi
                            """
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'reports/bundle-audit.txt', allowEmptyArchive: true
                        }
                    }
                }
            }
        }

        stage('Rails-Specific Checks') {
            parallel {
                stage('Database Schema Check') {
                    steps {
                        script {
                            echo "üìã Checking database schema..."
                            sh """
                                if [ -f config/database.yml ]; then
                                    echo "‚úÖ Database configuration found"
                                    
                                    # Check if migration files are valid
                                    if [ -d db/migrate ]; then
                                        echo "üîç Checking migration files..."
                                        find db/migrate -name "*.rb" | while read migration; do
                                            echo "Checking migration: \$migration"
                                            ruby -c "\$migration" || exit 1
                                        done
                                        echo "‚úÖ All migration files are valid"
                                    else
                                        echo "‚ö†Ô∏è No migrations directory found"
                                    fi
                                    
                                    # Check for pending migrations (if we can connect to test DB)
                                    if bundle exec rails db:version &>/dev/null; then
                                        echo "üìä Current database version:"
                                        bundle exec rails db:version
                                    else
                                        echo "‚ö†Ô∏è Cannot connect to database for version check"
                                    fi
                                else
                                    echo "‚ö†Ô∏è No database configuration found"
                                fi
                            """
                        }
                    }
                }

                stage('Rails Configuration Check') {
                    steps {
                        script {
                            echo "‚öôÔ∏è Checking Rails configuration..."
                            sh """
                                if [ -f config/application.rb ]; then
                                    echo "‚úÖ Rails application configuration found"
                                    
                                    # Check environment configs
                                    for env in development test production; do
                                        if [ -f "config/environments/\$env.rb" ]; then
                                            echo "‚úÖ \$env environment config found"
                                            ruby -c "config/environments/\$env.rb" || exit 1
                                        else
                                            echo "‚ö†Ô∏è \$env environment config missing"
                                        fi
                                    done
                                    
                                    # Check routes file
                                    if [ -f config/routes.rb ]; then
                                        echo "‚úÖ Routes configuration found"
                                        ruby -c config/routes.rb || exit 1
                                    fi
                                    
                                    # Check for secrets/credentials
                                    if [ -f config/credentials.yml.enc ]; then
                                        echo "‚úÖ Encrypted credentials found"
                                    elif [ -f config/secrets.yml ]; then
                                        echo "‚úÖ Secrets configuration found"
                                    else
                                        echo "‚ö†Ô∏è No secrets/credentials configuration found"
                                    fi
                                else
                                    echo "‚ùå Not a Rails application"
                                fi
                            """
                        }
                    }
                }

                stage('Asset Pipeline Check') {
                    steps {
                        script {
                            echo "üé® Checking asset pipeline..."
                            sh """
                                # Check for asset directories
                                if [ -d app/assets ]; then
                                    echo "‚úÖ Assets directory found"
                                    
                                    # Check JavaScript files
                                    if [ -d app/assets/javascripts ] || [ -d app/javascript ]; then
                                        echo "üìú Checking JavaScript files..."
                                        # Basic syntax check for JS files
                                        find app/assets app/javascript -name "*.js" 2>/dev/null | while read jsfile; do
                                            echo "Checking: \$jsfile"
                                            # You could add Node.js syntax checking here if needed
                                        done
                                    fi
                                    
                                    # Check CSS/SCSS files
                                    if [ -d app/assets/stylesheets ]; then
                                        echo "üé® Checking stylesheet files..."
                                        find app/assets/stylesheets -name "*.scss" -o -name "*.css" | while read stylesheet; do
                                            echo "Found stylesheet: \$stylesheet"
                                        done
                                    fi
                                else
                                    echo "‚ö†Ô∏è No assets directory found"
                                fi
                                
                                # Check if assets can be precompiled (in test mode)
                                if [ -f Gemfile ] && bundle exec rails assets:precompile --dry-run &>/dev/null; then
                                    echo "‚úÖ Asset precompilation check passed"
                                else
                                    echo "‚ö†Ô∏è Asset precompilation check failed or not available"
                                fi
                            """
                        }
                    }
                }
            }
        }

        stage('Test Suite') {
            steps {
                script {
                    echo "üß™ Running test suite..."
                    sh """
                        if [ -f Gemfile ]; then
                            # Check what testing framework is available
                            if bundle exec rspec --version &>/dev/null; then
                                echo "üß™ Running RSpec tests..."
                                mkdir -p reports
                                bundle exec rspec --format progress --format json --out reports/rspec.json || echo "‚ö†Ô∏è Some tests failed"
                            elif bundle exec rails test --version &>/dev/null; then
                                echo "üß™ Running Rails tests..."
                                bundle exec rails test || echo "‚ö†Ô∏è Some tests failed"
                            elif bundle exec rake test &>/dev/null; then
                                echo "üß™ Running Rake tests..."
                                bundle exec rake test || echo "‚ö†Ô∏è Some tests failed"
                            else
                                echo "‚ö†Ô∏è No test framework found (RSpec, Rails test, or Rake test)"
                                echo "‚ÑπÔ∏è Consider adding tests to your application"
                            fi
                        else
                            echo "‚ö†Ô∏è No Gemfile found - skipping tests"
                        fi
                    """
                }
            }
            post {
                always {
                    // Archive test reports
                    archiveArtifacts artifacts: 'reports/rspec.json', allowEmptyArchive: true
                    // You can also publish test results if using JUnit format
                    // publishTestResults testResultsPattern: 'reports/rspec.xml'
                }
            }
        }

        stage('Code Quality Summary') {
            steps {
                script {
                    echo "üìä Generating code quality summary..."
                    sh """
                        echo "=== CODE QUALITY SUMMARY ==="
                        echo "Branch: ${env.DETECTED_BRANCH}"
                        echo "Target: ${env.TARGET_SERVER}"
                        echo ""
                        
                        # RuboCop summary
                        if [ -f reports/rubocop.json ]; then
                            echo "üìã RuboCop Issues:"
                            cat reports/rubocop.json | grep -o '"offense_count":[0-9]*' | head -1 || echo "Could not parse RuboCop results"
                        fi
                        
                        # Brakeman summary
                        if [ -f reports/brakeman.json ]; then
                            echo "üîí Security Issues:"
                            cat reports/brakeman.json | grep -o '"warnings":\\[.*\\]' || echo "Could not parse Brakeman results"
                        fi
                        
                        # Bundle audit summary
                        if [ -f reports/bundle-audit.txt ]; then
                            echo "üõ°Ô∏è Vulnerability Summary:"
                            grep -i "vulnerabilities found" reports/bundle-audit.txt || echo "No vulnerabilities found"
                        fi
                        
                        echo "==========================="
                    """
                }
            }
        }

        stage('Deploy with Ansible') {
            when {
                expression { 
                    // Only deploy if code quality checks didn't find critical issues
                    return true // You can add conditions here based on quality gate results
                }
            }
            steps {
                withCredentials([
                    string(credentialsId: "${env.ANSIBLE_VAULT_PASSWORD_ID}", variable: 'VAULT_PASSWORD')
                ]) {
                    script {
                        writeFile file: 'vault_pass.txt', text: VAULT_PASSWORD

                        echo "üöÄ Deploying to ${env.TARGET_SERVER}..."
                        
                        sh """
                            ansible-playbook -i ${env.ANSIBLE_INVENTORY} \
                                             --limit ${env.ANSIBLE_LIMIT} \
                                             --extra-vars "rails_env=${env.RAILS_ENV} branch_name=${env.DETECTED_BRANCH} app_user=deploy app_path=/var/www/hello-world-app git_repo_url=${env.GIT_REPO_URL}" \
                                             --vault-password-file vault_pass.txt \
                                             -v \
                                             ${env.ANSIBLE_PLAYBOOK}
                        """

                        sh "rm -f vault_pass.txt"
                    }
                }
            }
        }
    }

    post {
        always {
            // Archive all reports
            archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true
        }
        success {
            script {
                echo "‚úÖ SUCCESS: Code quality checks passed and deployment completed for '${env.DETECTED_BRANCH}'"
            }
        }
        failure {
            script {
                echo "‚ùå FAILED: Code quality checks or deployment failed for '${env.DETECTED_BRANCH}'"
            }
        }
        cleanup {
            cleanWs()
        }
    }
}