pipeline {
    agent any
    
    environment {
        RAILS_ENV = 'test'
        RUBY_VERSION = '3.1.3'
        BUNDLER_VERSION = '2.3.0'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "Checked out code from repository"
            }
        }
        
        stage('Setup Ruby Environment') {
            steps {
                script {
                    // Install rbenv and Ruby if not present
                    sh '''
                        # Check if rbenv is installed
                        if ! command -v rbenv &> /dev/null; then
                            echo "Installing rbenv..."
                            curl -fsSL https://github.com/rbenv/rbenv-installer/raw/HEAD/bin/rbenv-installer | bash
                            export PATH="$HOME/.rbenv/bin:$PATH"
                            eval "$(rbenv init -)"
                        fi
                        
                        # Install Ruby version if not present
                        if ! rbenv versions | grep -q ${RUBY_VERSION}; then
                            echo "Installing Ruby ${RUBY_VERSION}..."
                            rbenv install ${RUBY_VERSION}
                        fi
                        
                        rbenv global ${RUBY_VERSION}
                        rbenv rehash
                    '''
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    sh '''
                        export PATH="$HOME/.rbenv/bin:$PATH"
                        eval "$(rbenv init -)"
                        
                        # Install bundler
                        gem install bundler -v ${BUNDLER_VERSION}
                        
                        # Install gems
                        bundle install --jobs=4 --retry=3
                        
                        # Install system dependencies for mimemagic
                        if command -v brew &> /dev/null; then
                            brew install shared-mime-info || true
                        fi
                    '''
                }
            }
        }
        
        stage('Setup Database') {
            steps {
                script {
                    sh '''
                        export PATH="$HOME/.rbenv/bin:$PATH"
                        eval "$(rbenv init -)"
                        
                        # Start PostgreSQL if not running
                        if command -v brew &> /dev/null; then
                            brew services start postgresql || true
                        fi
                        
                        # Create and setup test database
                        RAILS_ENV=test bundle exec rake db:create
                        RAILS_ENV=test bundle exec rake db:migrate
                    '''
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    sh '''
                        export PATH="$HOME/.rbenv/bin:$PATH"
                        eval "$(rbenv init -)"
                        
                        # Run RSpec tests if present
                        if [ -f "spec/rails_helper.rb" ]; then
                            RAILS_ENV=test bundle exec rspec
                        fi
                        
                        # Run Minitest if present
                        if [ -d "test" ]; then
                            RAILS_ENV=test bundle exec rake test
                        fi
                    '''
                }
            }
        }
        
        stage('Code Quality Checks') {
            steps {
                script {
                    sh '''
                        export PATH="$HOME/.rbenv/bin:$PATH"
                        eval "$(rbenv init -)"
                        
                        # Run Rubocop if present
                        if bundle show rubocop &> /dev/null; then
                            bundle exec rubocop --format progress
                        fi
                        
                        # Run Brakeman security scan if present
                        if bundle show brakeman &> /dev/null; then
                            bundle exec brakeman -z
                        fi
                    '''
                }
            }
        }
        
        stage('Asset Precompilation') {
            steps {
                script {
                    sh '''
                        export PATH="$HOME/.rbenv/bin:$PATH"
                        eval "$(rbenv init -)"
                        
                        # Precompile assets for production
                        RAILS_ENV=production bundle exec rake assets:precompile
                    '''
                }
            }
        }
        
        stage('Build Artifact') {
            steps {
                script {
                    sh '''
                        # Create deployment package
                        tar -czf hello-world-app-${BUILD_NUMBER}.tar.gz \
                            --exclude='.git' \
                            --exclude='tmp' \
                            --exclude='log' \
                            --exclude='node_modules' \
                            --exclude='coverage' \
                            .
                    '''
                }
                
                // Archive the artifact
                archiveArtifacts artifacts: 'hello-world-app-*.tar.gz', fingerprint: true
            }
        }
    }
    
    post {
        always {
            script {
                // Clean up test database
                sh '''
                    export PATH="$HOME/.rbenv/bin:$PATH"
                    eval "$(rbenv init -)"
                    RAILS_ENV=test bundle exec rake db:drop || true
                '''
            }
            
            // Clean workspace
            cleanWs()
        }
        
        success {
            echo 'CI Pipeline completed successfully!'
            // You can add notifications here
        }
        
        failure {
            echo 'CI Pipeline failed!'
            // You can add failure notifications here
        }
    }
}