pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['staging', 'production'],
            description: 'Select deployment environment'
        )
        string(
            name: 'BUILD_NUMBER_TO_DEPLOY',
            defaultValue: '',
            description: 'Build number from CI pipeline to deploy (leave empty for latest)'
        )
        booleanParam(
            name: 'SKIP_SERVER_SETUP',
            defaultValue: true,
            description: 'Skip server setup (uncheck for first deployment)'
        )
        choice(
            name: 'POST_DEPLOY_ACTION',
            choices: ['none', 'create_user'],
            description: 'Action to perform after deployment'
        )
    }
    
    environment {
        APP_NAME = 'hello-world-app'
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_STDOUT_CALLBACK = 'yaml'
    }
    
    stages {
        stage('Manual Approval') {
            steps {
                script {
                    def deploymentMessage = "Deploy to ${params.ENVIRONMENT} using Ansible?"
                    if (params.ENVIRONMENT == 'production') {
                        deploymentMessage = "⚠️ PRODUCTION DEPLOYMENT ⚠️\n\nAre you sure you want to deploy to PRODUCTION?\n\nBuild: ${params.BUILD_NUMBER_TO_DEPLOY ?: 'latest'}\nMethod: Ansible automation"
                    }
                    
                    def approver = input message: deploymentMessage,
                                        ok: "Deploy to ${params.ENVIRONMENT}",
                                        submitterParameter: 'APPROVER'
                    
                    env.DEPLOYMENT_APPROVER = approver ?: 'unknown'
                    
                    echo "Deployment approved by: ${env.DEPLOYMENT_APPROVER}"
                    echo "Deploying to: ${params.ENVIRONMENT}"
                    echo "Build to deploy: ${params.BUILD_NUMBER_TO_DEPLOY ?: 'latest'}"
                    echo "Server setup: ${params.SKIP_SERVER_SETUP ? 'Skip' : 'Run'}"
                    echo "Post-deploy action: ${params.POST_DEPLOY_ACTION}"
                }
            }
        }
        
        stage('Download Artifact') {
            steps {
                script {
                    cleanWs()
                    
                    def buildNumber = params.BUILD_NUMBER_TO_DEPLOY ?: ''
                    def ciJobName = 'hello-rails'
                    
                    echo "Downloading artifact from: ${ciJobName}"
                    
                    try {
                        if (buildNumber) {
                            step([$class: 'CopyArtifact',
                                  projectName: ciJobName,
                                  selector: [$class: 'SpecificBuildSelector', buildNumber: buildNumber],
                                  filter: 'hello-world-app-*.tar.gz',
                                  fingerprintArtifacts: true])
                        } else {
                            step([$class: 'CopyArtifact',
                                  projectName: ciJobName,
                                  selector: [$class: 'StatusBuildSelector', stable: false],
                                  filter: 'hello-world-app-*.tar.gz',
                                  fingerprintArtifacts: true])
                        }
                        
                        sh '''
                            if ls hello-world-app-*.tar.gz 1> /dev/null 2>&1; then
                                echo "✅ Artifact files found:"
                                ls -la hello-world-app-*.tar.gz
                            else
                                echo "❌ No artifact files found!"
                                exit 1
                            fi
                        '''
                        
                    } catch (Exception e) {
                        error("Failed to download artifact: ${e.message}")
                    }
                }
            }
        }
        
        stage('Setup Ansible Environment') {
            steps {
                script {
                    sh '''
                        # Debug current location
                        echo "=== Debug Information ==="
                        echo "Current directory: $(pwd)"
                        echo "Files in current directory:"
                        ls -la
                        
                        # Find Ansible binary directly
                        echo "Locating Ansible installation..."
                        
                        # Check multiple possible locations
                        ANSIBLE_BINARY=""
                        POSSIBLE_PATHS=(
                            "/usr/local/bin/ansible"
                            "/opt/homebrew/bin/ansible"
                            "$HOME/Library/Python/3.9/bin/ansible"
                            "$HOME/.local/bin/ansible"
                        )
                        
                        for path in "${POSSIBLE_PATHS[@]}"; do
                            if [ -f "$path" ]; then
                                ANSIBLE_BINARY="$path"
                                echo "✅ Found Ansible at: $path"
                                break
                            fi
                        done
                        
                        # Test Ansible with direct path
                        echo "Testing Ansible..."
                        $ANSIBLE_BINARY --version
                        
                        # Store the path for later stages
                        echo "$ANSIBLE_BINARY" > /tmp/ansible_path
                        echo "ANSIBLE_DIR=$(dirname $ANSIBLE_BINARY)" > /tmp/ansible_env
                        
                        # Check if ansible directory exists (be more flexible)
                        if [ -d "ansible" ]; then
                            echo "✅ Found ansible directory"
                            echo "Contents of ansible directory:"
                            ls -la ansible/
                        elif [ -d "./ansible" ]; then
                            echo "✅ Found ansible directory at ./ansible"
                            echo "Contents of ansible directory:"
                            ls -la ./ansible/
                        else
                            echo "❌ Ansible directory not found in current location"
                            echo "Searching for ansible directory..."
                            find . -name "ansible" -type d
                            echo "Creating minimal ansible structure..."
                            mkdir -p ansible/{inventories,playbooks}
                            mkdir -p ansible/inventories/staging
                            
                            # Create minimal files
                            cat > ansible/inventories/staging/hosts << 'EOF'
[webservers]
staging-server ansible_host=3.237.64.25 ansible_user=deploy

[all:vars]
ansible_ssh_private_key_file=~/.ssh/deploy_key
rails_env=staging
app_name=hello-world-app
deploy_user=deploy
deploy_path=/var/www/hello-world-app
EOF

                            cat > ansible/playbooks/deploy.yml << 'EOF'
---
- name: Deploy Application
  hosts: webservers
  become: yes
  vars:
    app_archive_path: "/tmp/{{ app_name }}-{{ build_number | default('latest') }}.tar.gz"
  
  tasks:
    - name: Transfer application artifact to server
      copy:
        src: "{{ local_artifact_path }}"
        dest: "{{ app_archive_path }}"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0644'
      delegate_to: localhost
      become: no

    - name: Create directories
      file:
        path: "{{ deploy_path }}/{{ rails_env }}/current"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0755'

    - name: Verify artifact exists on server
      stat:
        path: "{{ app_archive_path }}"
      register: artifact_check

    - name: Fail if artifact not found
      fail:
        msg: "Artifact not found at {{ app_archive_path }}"
      when: not artifact_check.stat.exists

    - name: Extract application
      unarchive:
        src: "{{ app_archive_path }}"
        dest: "{{ deploy_path }}/{{ rails_env }}/current"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        remote_src: yes

    - name: Stop existing servers
      shell: |
        pkill -f 'python.*http.server' || true
        pkill -f 'rails server' || true
        sleep 2
      become_user: "{{ deploy_user }}"
      ignore_errors: yes

    - name: Start server
      shell: |
        cd {{ deploy_path }}/{{ rails_env }}/current
        nohup bash -c 'python3 -m http.server 3000' > /tmp/server.log 2>&1 &
        echo $! > /tmp/server.pid
        sleep 5
        echo "Server started with PID: $(cat /tmp/server.pid 2>/dev/null || echo 'unknown')"
      become_user: "{{ deploy_user }}"
      ignore_errors: yes

    - name: Wait for server to initialize
      pause:
        seconds: 10

    - name: Verify server is running
      shell: |
        echo "=== Server Status Check ==="
        if ps aux | grep -v grep | grep 'python.*http.server' > /dev/null; then
          echo "✅ Python HTTP server is running"
          PID=$(cat /tmp/server.pid 2>/dev/null || echo 'unknown')
          echo "Server PID: $PID"
        else
          echo "❌ Server not found in process list"
        fi
        
        echo "=== Port Check ==="
        if netstat -tlnp 2>/dev/null | grep :3000; then
          echo "✅ Port 3000 is listening"
        else
          echo "❌ Port 3000 not listening"
        fi
        
        echo "=== Log File Check ==="
        if [ -f /tmp/server.log ]; then
          echo "Server log (last 10 lines):"
          tail -10 /tmp/server.log
        else
          echo "No server log file found"
        fi
        
        echo "=== Process List ==="
        ps aux | grep -E "(python|rails)" | grep -v grep || echo "No Python/Rails processes found"
      become_user: "{{ deploy_user }}"
      ignore_errors: yes

    - name: Test server response
      uri:
        url: "http://{{ ansible_host }}:3000"
        method: GET
        status_code: [200, 301, 302, 404]
        timeout: 10
      register: server_response
      ignore_errors: yes
      delegate_to: localhost

    - name: Display server test result
      debug:
        msg: |
          Server Response: {{ 'SUCCESS - Server is responding' if server_response is succeeded else 'Server not responding yet' }}
          Status Code: {{ server_response.status | default('No response') }}

    - name: Cleanup artifact file
      file:
        path: "{{ app_archive_path }}"
        state: absent

    - name: Display deployment success
      debug:
        msg: |
          🎉 Deployment completed!
          Server: {{ ansible_host }}:3000
          Application: {{ deploy_path }}/{{ rails_env }}/current
          Check manually: ssh {{ deploy_user }}@{{ ansible_host }} "ps aux | grep python"
          Browse to: http://{{ ansible_host }}:3000
EOF
                            echo "✅ Created minimal ansible structure"
                        fi
                        
                        echo "✅ Ansible environment verified"
                    '''
                }
            }
        }
        
        stage('Prepare Deployment') {
            steps {
                script {
                    sh '''
                        # Get artifact info
                        ARTIFACT_FILE=$(ls hello-world-app-*.tar.gz | head -1)
                        BUILD_NUM=$(echo $ARTIFACT_FILE | sed 's/hello-world-app-//; s/.tar.gz//')
                        
                        echo "Artifact: $ARTIFACT_FILE"
                        echo "Build number: $BUILD_NUM"
                        
                        # Copy artifact to /tmp for local access
                        cp $ARTIFACT_FILE /tmp/hello-world-app-${BUILD_NUM}.tar.gz
                        
                        # Also keep the artifact in workspace for SCP transfer
                        echo "Artifact location: $(pwd)/$ARTIFACT_FILE"
                        
                        # Create ansible variables file
                        cat > ansible/extra_vars.yml << EOF
build_number: ${BUILD_NUM}
app_archive_path: /tmp/hello-world-app-${BUILD_NUM}.tar.gz
local_artifact_path: $(pwd)/${ARTIFACT_FILE}
environment: ${ENVIRONMENT}
deployed_by: ${DEPLOYMENT_APPROVER}
deployed_at: $(date)
EOF
                        
                        echo "=== Deployment Variables ==="
                        cat ansible/extra_vars.yml
                    '''
                }
            }
        }
        
        stage('Test Ansible Connectivity') {
            steps {
                script {
                    dir('ansible') {
                        sh '''
                            # Load Ansible path
                            source /tmp/ansible_env
                            ANSIBLE_BINARY=$(cat /tmp/ansible_path)
                            
                            echo "Testing Ansible connectivity..."
                            echo "Using Ansible binary: $ANSIBLE_BINARY"
                            echo "Using inventory: inventories/${ENVIRONMENT}/hosts"
                            
                            # Test ping with direct binary path
                            $ANSIBLE_BINARY -i inventories/${ENVIRONMENT}/hosts webservers -m ping
                            
                            if [ $? -eq 0 ]; then
                                echo "✅ Ansible connectivity test passed"
                            else
                                echo "❌ Ansible connectivity test failed"
                                echo "Debugging information:"
                                echo "Current directory: $(pwd)"
                                echo "Inventory file contents:"
                                cat inventories/${ENVIRONMENT}/hosts
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Server Setup') {
            when {
                expression { !params.SKIP_SERVER_SETUP }
            }
            steps {
                script {
                    dir('ansible') {
                        sh '''
                            # Load Ansible path
                            source /tmp/ansible_env
                            ANSIBLE_BINARY=$(cat /tmp/ansible_path)
                            ANSIBLE_PLAYBOOK_BINARY="$(dirname $ANSIBLE_BINARY)/ansible-playbook"
                            
                            echo "Running initial server setup..."
                            
                            # Check if setup playbook exists, if not create a basic one
                            if [ ! -f "playbooks/setup-server.yml" ]; then
                                echo "Creating setup-server.yml playbook..."
                                cat > playbooks/setup-server.yml << 'EOF'
---
- name: Initial Server Setup
  hosts: webservers
  become: yes
  
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install system dependencies
      apt:
        name:
          - curl
          - wget
          - git
          - build-essential
          - python3
          - unzip
        state: present

    - name: Create deployment directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0755'
      loop:
        - "{{ deploy_path }}"
        - "{{ deploy_path }}/{{ rails_env }}"
        - "{{ deploy_path }}/{{ rails_env }}/releases"
        - "{{ deploy_path }}/{{ rails_env }}/shared"
        - "{{ deploy_path }}/{{ rails_env }}/current"

    - name: Ensure deploy user exists
      user:
        name: "{{ deploy_user }}"
        shell: /bin/bash
        create_home: yes
        state: present

    - name: Set proper ownership
      file:
        path: "{{ deploy_path }}"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        state: directory
        recurse: yes
EOF
                            fi
                            
                            # Run setup playbook
                            $ANSIBLE_PLAYBOOK_BINARY -i inventories/${ENVIRONMENT}/hosts playbooks/setup-server.yml -v
                            
                            if [ $? -eq 0 ]; then
                                echo "✅ Server setup completed successfully"
                            else
                                echo "❌ Server setup failed"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Deploy with Ansible') {
            steps {
                script {
                    dir('ansible') {
                        sh '''
                            # Load Ansible path
                            source /tmp/ansible_env
                            ANSIBLE_BINARY=$(cat /tmp/ansible_path)
                            ANSIBLE_PLAYBOOK_BINARY="$(dirname $ANSIBLE_BINARY)/ansible-playbook"
                            
                            echo "Starting Ansible deployment..."
                            echo "Environment: ${ENVIRONMENT}"
                            echo "Using binary: $ANSIBLE_PLAYBOOK_BINARY"
                            echo "Deploying artifact: $(cat extra_vars.yml | grep app_archive_path)"
                            
                            # Run deployment playbook with direct binary path
                            $ANSIBLE_PLAYBOOK_BINARY -i inventories/${ENVIRONMENT}/hosts playbooks/deploy.yml \
                                --extra-vars @extra_vars.yml \
                                -v
                            
                            if [ $? -eq 0 ]; then
                                echo "✅ Ansible deployment completed successfully"
                            else
                                echo "❌ Ansible deployment failed"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Post-Deployment Verification') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                    ]) {
                        sh '''
                            echo "Performing post-deployment verification..."
                            
                            # Wait for application to start
                            sleep 15
                            
                            # Health check
                            MAX_RETRIES=12
                            RETRY_COUNT=0
                            
                            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                                echo "Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
                                
                                if curl -f -s -o /dev/null http://${EC2_HOST}:3000/health || curl -f -s -o /dev/null http://${EC2_HOST}:3000/; then
                                    echo "✅ Application is responding!"
                                    break
                                else
                                    echo "⏳ Application not ready, retrying in 10 seconds..."
                                    sleep 10
                                    RETRY_COUNT=$((RETRY_COUNT + 1))
                                fi
                            done
                            
                            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                                echo "❌ Health check failed after $MAX_RETRIES attempts"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Create User') {
            when {
                expression { params.POST_DEPLOY_ACTION == 'create_user' }
            }
            steps {
                script {
                    def userChoice = input(
                        message: 'Create new user on server?',
                        parameters: [
                            string(name: 'USERNAME', description: 'Enter username', defaultValue: ''),
                            choice(name: 'ACCESS_LEVEL', choices: ['1', '2', '3'], description: '1=Admin (full access), 2=Operations (no delete), 3=Read-only'),
                            booleanParam(name: 'COPY_SSH_KEY', defaultValue: false, description: 'Copy SSH key from deploy user?')
                        ]
                    )
                    
                    if (userChoice.USERNAME) {
                        dir('ansible') {
                            sh """
                                # Load Ansible path
                                source /tmp/ansible_env
                                ANSIBLE_BINARY=\$(cat /tmp/ansible_path)
                                ANSIBLE_PLAYBOOK_BINARY="\$(dirname \$ANSIBLE_BINARY)/ansible-playbook"
                                
                                echo "Creating user: ${userChoice.USERNAME}"
                                echo "Access level: ${userChoice.ACCESS_LEVEL}"
                                echo "Copy SSH: ${userChoice.COPY_SSH_KEY}"
                                
                                # Create user variables file
                                cat > user_vars.yml << EOF
new_username: ${userChoice.USERNAME}
user_access_level: ${userChoice.ACCESS_LEVEL}
copy_ssh_key: ${userChoice.COPY_SSH_KEY}
EOF
                                
                                # Check if create-user playbook exists, if not create a basic one
                                if [ ! -f "playbooks/create-user.yml" ]; then
                                    echo "Creating create-user.yml playbook..."
                                    cat > playbooks/create-user.yml << 'EOF2'
---
- name: Create User with Access Control
  hosts: webservers
  become: yes
  
  tasks:
    - name: Create user groups (if not exist)
      group:
        name: "{{ item }}"
        state: present
      loop:
        - admin_group
        - ops_group
        - readonly_group

    - name: Determine user group based on access level
      set_fact:
        user_group: "{{ 'admin_group' if user_access_level == '1' else 'ops_group' if user_access_level == '2' else 'readonly_group' }}"

    - name: Create user
      user:
        name: "{{ new_username }}"
        shell: /bin/bash
        groups: "{{ user_group }}"
        append: yes
        create_home: yes
        state: present

    - name: Setup SSH directory for new user
      file:
        path: "/home/{{ new_username }}/.ssh"
        state: directory
        owner: "{{ new_username }}"
        group: "{{ new_username }}"
        mode: '0700'
      when: copy_ssh_key | bool

    - name: Copy SSH key from deploy user
      copy:
        src: "/home/{{ deploy_user }}/.ssh/authorized_keys"
        dest: "/home/{{ new_username }}/.ssh/authorized_keys"
        owner: "{{ new_username }}"
        group: "{{ new_username }}"
        mode: '0600'
        remote_src: yes
      when: copy_ssh_key | bool

    - name: Setup basic sudoers for groups
      lineinfile:
        path: /etc/sudoers.d/user_access
        line: "{{ item }}"
        create: yes
        mode: '0440'
      loop:
        - "# User access control"
        - "%admin_group ALL=(ALL) NOPASSWD: ALL"
        - "%ops_group ALL=(ALL) NOPASSWD: ALL, !/bin/rm, !/bin/rmdir, !/usr/bin/rm, !/usr/bin/rmdir"
        - "%readonly_group ALL=(ALL) NOPASSWD: /bin/cat, /bin/less, /bin/ls, /usr/bin/tail, /usr/bin/head"

    - name: Display user creation result
      debug:
        msg: |
          ✅ User '{{ new_username }}' created successfully!
          👥 Group: {{ user_group }}
          🔑 SSH Access: {{ 'Enabled' if copy_ssh_key | bool else 'Disabled' }}
          🔗 Login: ssh {{ new_username }}@{{ ansible_host }}
          
          📋 Access Level Details:
          {% if user_access_level == '1' %}
          🔴 ADMIN: Full system access - use with caution!
          {% elif user_access_level == '2' %}
          🟡 OPERATIONS: Can read/write but not delete files (rm blocked)
          {% else %}
          🟢 READ-ONLY: Can only view files and directories
          {% endif %}
EOF2
                                fi
                                
                                # Run user creation playbook
                                \$ANSIBLE_PLAYBOOK_BINARY -i inventories/${ENVIRONMENT}/hosts playbooks/create-user.yml \
                                    --extra-vars @user_vars.yml \
                                    -v
                            """
                        }
                    } else {
                        echo "No username provided, skipping user creation"
                    }
                }
            }
        }
        
        stage('Deployment Summary') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                    ]) {
                        sh '''
                            echo "
🎉 Ansible Deployment Summary
================================
Environment: ${ENVIRONMENT}
Server: ${EC2_HOST}
Approved by: ${DEPLOYMENT_APPROVER}
Build: ${BUILD_NUMBER_TO_DEPLOY:-latest}
Method: Ansible automation
Application URL: http://${EC2_HOST}:3000
Deployment time: $(date)
================================

📋 Available Access Levels:
1. Admin: Full system access
2. Operations: Can read/write but not delete
3. Read-only: View files only

🔗 SSH Access: ssh <username>@${EC2_HOST}
                            "
                        '''
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "✅ Ansible deployment to ${params.ENVIRONMENT} completed successfully!"
            
            script {
                try {
                    withCredentials([
                        string(credentialsId: 'slack-webhook-url', variable: 'SLACK_WEBHOOK')
                    ]) {
                        sh '''
                            curl -X POST -H 'Content-type: application/json' \
                                --data '{"text":"✅ Ansible Deployment Success: '${APP_NAME}' to '${ENVIRONMENT}' - Build #'${BUILD_NUMBER}' (by '${DEPLOYMENT_APPROVER}')"}' \
                                $SLACK_WEBHOOK
                        '''
                    }
                } catch (Exception e) {
                    echo "Notification failed: ${e.message}"
                }
            }
        }
        
        failure {
            echo "❌ Ansible deployment to ${params.ENVIRONMENT} failed!"
            
            script {
                try {
                    withCredentials([
                        string(credentialsId: 'slack-webhook-url', variable: 'SLACK_WEBHOOK')
                    ]) {
                        sh '''
                            curl -X POST -H 'Content-type: application/json' \
                                --data '{"text":"❌ Ansible Deployment Failed: '${APP_NAME}' to '${ENVIRONMENT}' - Build #'${BUILD_NUMBER}' (by '${DEPLOYMENT_APPROVER}')"}' \
                                $SLACK_WEBHOOK
                        '''
                    }
                } catch (Exception e) {
                    echo "Failed notification: ${e.message}"
                }
            }
        }
        
        always {
            script {
                sh '''
                    rm -f hello-world-app-*.tar.gz
                    rm -f ansible/extra_vars.yml
                    rm -f ansible/user_vars.yml
                '''
            }
            cleanWs()
        }
    }
}