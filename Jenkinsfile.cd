pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['staging', 'production'],
            description: 'Select deployment environment'
        )
        string(
            name: 'BUILD_NUMBER_TO_DEPLOY',
            defaultValue: '',
            description: 'Build number from CI pipeline to deploy (leave empty for latest)'
        )
    }
    
    environment {
        RUBY_VERSION = '3.1.3'
        BUNDLER_VERSION = '2.3.0'
        DEPLOY_USER = 'deploy'
        APP_NAME = 'hello-world-app'
    }
    
    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    if (params.ENVIRONMENT == 'production') {
                        input message: 'Are you sure you want to deploy to PRODUCTION?', ok: 'Deploy'
                    }
                    
                    echo "Deploying to: ${params.ENVIRONMENT}"
                    echo "Build to deploy: ${params.BUILD_NUMBER_TO_DEPLOY ?: 'latest'}"
                }
            }
        }
        
        stage('Download Artifact') {
            steps {
                script {
                    if (params.BUILD_NUMBER_TO_DEPLOY) {
                        // Copy artifact from specific build
                        copyArtifacts(
                            projectName: env.JOB_NAME.replace('.cd', '.ci'),
                            selector: specific(params.BUILD_NUMBER_TO_DEPLOY),
                            filter: 'hello-world-app-*.tar.gz'
                        )
                    } else {
                        // Copy artifact from latest successful build
                        copyArtifacts(
                            projectName: env.JOB_NAME.replace('.cd', '.ci'),
                            selector: lastSuccessful(),
                            filter: 'hello-world-app-*.tar.gz'
                        )
                    }
                }
            }
        }
        
        stage('Prepare Deployment') {
            steps {
                script {
                    sh '''
                        # Extract the artifact
                        ARTIFACT_FILE=$(ls hello-world-app-*.tar.gz | head -1)
                        echo "Deploying artifact: $ARTIFACT_FILE"
                        
                        # Create deployment directory
                        mkdir -p deployment
                        cd deployment
                        tar -xzf ../$ARTIFACT_FILE
                        
                        # Set deployment timestamp
                        echo "$(date)" > DEPLOYMENT_TIMESTAMP
                        echo "${BUILD_NUMBER}" > BUILD_INFO
                    '''
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                script {
                    sh '''
                        cd deployment
                        export PATH="$HOME/.rbenv/bin:$PATH"
                        eval "$(rbenv init -)"
                        
                        # Install gems for deployment environment
                        RAILS_ENV=${ENVIRONMENT} bundle install --deployment --without development test
                        
                        # Set environment variables for deployment
                        export RAILS_ENV=${ENVIRONMENT}
                        export SECRET_KEY_BASE=$(bundle exec rails secret)
                        
                        # Create environment file
                        cat > .env.${ENVIRONMENT} << EOF
RAILS_ENV=${ENVIRONMENT}
SECRET_KEY_BASE=$SECRET_KEY_BASE
DATABASE_URL=postgresql://username:password@localhost:5432/hello_world_${ENVIRONMENT}
EOF
                    '''
                }
            }
        }
        
        stage('Database Migration') {
            steps {
                script {
                    sh '''
                        cd deployment
                        export PATH="$HOME/.rbenv/bin:$PATH"
                        eval "$(rbenv init -)"
                        
                        # Load environment variables
                        source .env.${ENVIRONMENT}
                        
                        # Create database if it doesn't exist
                        RAILS_ENV=${ENVIRONMENT} bundle exec rake db:create
                        
                        # Run migrations
                        RAILS_ENV=${ENVIRONMENT} bundle exec rake db:migrate
                    '''
                }
            }
        }
        
        stage('Asset Compilation') {
            steps {
                script {
                    sh '''
                        cd deployment
                        export PATH="$HOME/.rbenv/bin:$PATH"
                        eval "$(rbenv init -)"
                        
                        # Load environment variables
                        source .env.${ENVIRONMENT}
                        
                        # Precompile assets
                        RAILS_ENV=${ENVIRONMENT} bundle exec rake assets:precompile
                    '''
                }
            }
        }
        
        stage('Deploy Application') {
            steps {
                script {
                    sh '''
                        cd deployment
                        
                        # Create deployment directory structure
                        DEPLOY_DIR="/var/www/${APP_NAME}/${ENVIRONMENT}"
                        CURRENT_DIR="${DEPLOY_DIR}/current"
                        RELEASES_DIR="${DEPLOY_DIR}/releases"
                        SHARED_DIR="${DEPLOY_DIR}/shared"
                        
                        # Create directories
                        sudo mkdir -p $RELEASES_DIR $SHARED_DIR/log $SHARED_DIR/tmp $SHARED_DIR/public/assets
                        
                        # Create release directory with timestamp
                        RELEASE_DIR="${RELEASES_DIR}/$(date +%Y%m%d%H%M%S)"
                        sudo mkdir -p $RELEASE_DIR
                        
                        # Copy application files
                        sudo cp -r . $RELEASE_DIR/
                        
                        # Create symlinks to shared directories
                        sudo ln -sf ${SHARED_DIR}/log ${RELEASE_DIR}/log
                        sudo ln -sf ${SHARED_DIR}/tmp ${RELEASE_DIR}/tmp
                        sudo ln -sf ${SHARED_DIR}/public/assets ${RELEASE_DIR}/public/assets
                        
                        # Update current symlink
                        sudo ln -sfn $RELEASE_DIR $CURRENT_DIR
                        
                        # Set proper permissions
                        sudo chown -R ${DEPLOY_USER}:${DEPLOY_USER} $DEPLOY_DIR
                        sudo chmod -R 755 $DEPLOY_DIR
                        
                        echo "Application deployed to: $CURRENT_DIR"
                    '''
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    sh '''
                        cd /var/www/${APP_NAME}/${ENVIRONMENT}/current
                        export PATH="$HOME/.rbenv/bin:$PATH"
                        eval "$(rbenv init -)"
                        
                        # Load environment variables
                        source .env.${ENVIRONMENT}
                        
                        # Start Rails server in background for health check
                        RAILS_ENV=${ENVIRONMENT} bundle exec rails server -d -p 3000
                        
                        # Wait for server to start
                        sleep 10
                        
                        # Perform health check
                        if curl -f http://localhost:3000/health || curl -f http://localhost:3000/; then
                            echo "Health check passed!"
                        else
                            echo "Health check failed!"
                            exit 1
                        fi
                        
                        # Stop the test server
                        pkill -f "rails server" || true
                    '''
                }
            }
        }
        
        stage('Restart Application Service') {
            steps {
                script {
                    sh '''
                        # Restart application service (adjust based on your setup)
                        # For systemd service:
                        # sudo systemctl restart hello-world-app-${ENVIRONMENT}
                        
                        # For passenger/nginx:
                        # sudo service nginx restart
                        
                        # For Docker:
                        # docker-compose -f docker-compose.${ENVIRONMENT}.yml up -d
                        
                        echo "Application service restarted for ${ENVIRONMENT}"
                    '''
                }
            }
        }
        
        stage('Cleanup Old Releases') {
            steps {
                script {
                    sh '''
                        # Keep only last 5 releases
                        RELEASES_DIR="/var/www/${APP_NAME}/${ENVIRONMENT}/releases"
                        cd $RELEASES_DIR
                        
                        # Remove old releases (keep last 5)
                        sudo ls -t | tail -n +6 | xargs -r sudo rm -rf
                        
                        echo "Cleanup completed"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Clean up deployment directory
                sh 'rm -rf deployment'
                sh 'rm -f hello-world-app-*.tar.gz'
            }
            
            cleanWs()
        }
        
        success {
            echo "Deployment to ${params.ENVIRONMENT} completed successfully!"
            // Add success notifications here
        }
        
        failure {
            echo "Deployment to ${params.ENVIRONMENT} failed!"
            // Add failure notifications here
            
            // Rollback logic could go here
            script {
                sh '''
                    echo "Consider rolling back to previous release if needed"
                    # Rollback example:
                    # DEPLOY_DIR="/var/www/${APP_NAME}/${ENVIRONMENT}"
                    # PREVIOUS_RELEASE=$(ls -t ${DEPLOY_DIR}/releases | sed -n 2p)
                    # sudo ln -sfn ${DEPLOY_DIR}/releases/$PREVIOUS_RELEASE ${DEPLOY_DIR}/current
                '''
            }
        }
    }
}