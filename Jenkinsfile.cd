pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['staging', 'production'],
            description: 'Select deployment environment'
        )
        string(
            name: 'BUILD_NUMBER_TO_DEPLOY',
            defaultValue: '',
            description: 'Build number from CI pipeline to deploy (leave empty for latest)'
        )
        booleanParam(
            name: 'FORCE_TOOL_INSTALLATION',
            defaultValue: false,
            description: 'Force reinstallation of all tools (even if already installed)'
        )
        booleanParam(
            name: 'SKIP_TOOL_CHECK',
            defaultValue: false,
            description: 'Skip tool verification and installation (use only if tools are confirmed to be installed)'
        )
    }
    
    environment {
        APP_NAME = 'hello-world-app'
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_STDOUT_CALLBACK = 'yaml'
    }
    
    stages {
        stage('Initial Server Tool Verification') {
            when {
                expression { !params.SKIP_TOOL_CHECK }
            }
            steps {
                script {
                    sh '''
                        echo "🔍 INITIAL SERVER TOOL VERIFICATION"
                        echo "====================================="
                        echo "Environment: ${ENVIRONMENT}"
                        echo "Force installation: ${FORCE_TOOL_INSTALLATION}"
                        echo ""
                        
                        # Create temporary Ansible structure for tool checking
                        mkdir -p temp_ansible/{inventories,playbooks}
                        mkdir -p temp_ansible/inventories/staging
                        mkdir -p temp_ansible/inventories/production
                        
                        # Create inventory files
                        cat > temp_ansible/inventories/staging/hosts << 'EOF'
[webservers]
staging-server ansible_host=54.210.171.180 ansible_user=deploy

[all:vars]
ansible_ssh_private_key_file=~/.ssh/deploy_key
deploy_user=deploy
EOF

                        cat > temp_ansible/inventories/production/hosts << 'EOF'
[webservers]
production-server ansible_host=YOUR_PROD_IP ansible_user=deploy

[all:vars]
ansible_ssh_private_key_file=~/.ssh/deploy_key
deploy_user=deploy
EOF

                        # Create comprehensive tool verification playbook with FIXED syntax
                        cat > temp_ansible/playbooks/verify_and_install_tools.yml << 'PLAYBOOK_EOF'
---
- name: Comprehensive Server Tool Verification and Installation
  hosts: webservers
  become: yes
  vars:
    force_installation: "{{ force_tool_installation | default(false) }}"
    required_tools:
      ruby_version: "3.1.3"
      bundler_version: "2.3.0"
      node_version: "18.x"
      postgres_version: "14"
    
    system_packages:
      - curl
      - wget
      - git
      - build-essential
      - libssl-dev
      - libreadline-dev
      - zlib1g-dev
      - libyaml-dev
      - libxml2-dev
      - libxslt1-dev
      - libcurl4-openssl-dev
      - libffi-dev
      - postgresql
      - postgresql-contrib
      - libpq-dev
      - nodejs
      - npm
      - python3
      - python3-pip
      - unzip
      - htop
      - tree
      - vim
      - redis-server
      - imagemagick
      - libmagickwand-dev
  
  tasks:
    - name: Create tool check directory
      file:
        path: /tmp/tool_check
        state: directory
        mode: '0755'

    - name: Tool audit script
      copy:
        dest: /tmp/tool_audit.sh
        mode: '0755'
        content: |
          #!/bin/bash
          echo "🔍 COMPREHENSIVE SERVER TOOL AUDIT"
          echo "=================================="
          echo "Date: $(date)"
          echo "Server: $(hostname)"
          echo ""
          
          # Initialize tracking variables
          MISSING_PACKAGES=""
          MISSING_TOOLS=""
          INSTALL_REQUIRED=false
          
          echo "📦 SYSTEM PACKAGES AUDIT:"
          echo "========================"
          for pkg in curl wget git build-essential postgresql nodejs python3 unzip redis-server imagemagick; do
            if dpkg -l 2>/dev/null | grep -q "^ii.*$pkg "; then
              echo "  ✅ $pkg - installed"
            else
              echo "  ❌ $pkg - MISSING"
              MISSING_PACKAGES="$MISSING_PACKAGES $pkg"
              INSTALL_REQUIRED=true
            fi
          done
          
          echo ""
          echo "💎 RUBY ENVIRONMENT AUDIT:"
          echo "========================="
          
          # Check rbenv
          if [ -d "/home/{{ deploy_user }}/.rbenv" ]; then
            echo "  ✅ rbenv - installed"
          else
            echo "  ❌ rbenv - NOT INSTALLED"
            MISSING_TOOLS="$MISSING_TOOLS rbenv"
            INSTALL_REQUIRED=true
          fi
          
          # Check Ruby
          if command -v ruby >/dev/null 2>&1; then
            RUBY_VERSION=$(ruby --version)
            echo "  ✅ Ruby - $RUBY_VERSION"
          else
            echo "  ❌ Ruby - NOT INSTALLED"
            MISSING_TOOLS="$MISSING_TOOLS ruby"
            INSTALL_REQUIRED=true
          fi
          
          # Check Bundler
          if command -v bundle >/dev/null 2>&1; then
            BUNDLER_VERSION=$(bundle --version)
            echo "  ✅ Bundler - $BUNDLER_VERSION"
          else
            echo "  ❌ Bundler - NOT INSTALLED"
            MISSING_TOOLS="$MISSING_TOOLS bundler"
            INSTALL_REQUIRED=true
          fi
          
          echo ""
          echo "🟢 NODE.JS ENVIRONMENT AUDIT:"
          echo "============================"
          
          # Check Node.js
          if command -v node >/dev/null 2>&1; then
            NODE_VERSION=$(node --version)
            echo "  ✅ Node.js - $NODE_VERSION"
          else
            echo "  ❌ Node.js - NOT INSTALLED"
            MISSING_TOOLS="$MISSING_TOOLS nodejs"
            INSTALL_REQUIRED=true
          fi
          
          # Check npm
          if command -v npm >/dev/null 2>&1; then
            NPM_VERSION=$(npm --version)
            echo "  ✅ npm - $NPM_VERSION"
          else
            echo "  ❌ npm - NOT INSTALLED"
            MISSING_TOOLS="$MISSING_TOOLS npm"
            INSTALL_REQUIRED=true
          fi
          
          echo ""
          echo "🐘 POSTGRESQL AUDIT:"
          echo "==================="
          
          # Check PostgreSQL client
          if command -v psql >/dev/null 2>&1; then
            PSQL_VERSION=$(psql --version)
            echo "  ✅ PostgreSQL client - $PSQL_VERSION"
          else
            echo "  ❌ PostgreSQL client - NOT INSTALLED"
            MISSING_TOOLS="$MISSING_TOOLS postgresql-client"
            INSTALL_REQUIRED=true
          fi
          
          # Check PostgreSQL service
          if systemctl is-active postgresql >/dev/null 2>&1; then
            echo "  ✅ PostgreSQL service - RUNNING"
          else
            echo "  ❌ PostgreSQL service - NOT RUNNING"
            MISSING_TOOLS="$MISSING_TOOLS postgresql-service"
            INSTALL_REQUIRED=true
          fi
          
          echo ""
          echo "📋 AUDIT SUMMARY:"
          echo "================"
          
          if [ "$INSTALL_REQUIRED" = "true" ] || [ "{{ force_installation }}" = "true" ]; then
            echo "❌ INSTALLATION REQUIRED"
            echo "INSTALL_REQUIRED" > /tmp/tool_check/status
          else
            echo "✅ ALL TOOLS ARE PROPERLY INSTALLED"
            echo "TOOLS_READY" > /tmp/tool_check/status
          fi
          
          # Store missing items
          echo "$MISSING_PACKAGES" > /tmp/tool_check/missing_packages
          echo "$MISSING_TOOLS" > /tmp/tool_check/missing_tools

    - name: Execute tool audit
      shell: /tmp/tool_audit.sh
      register: tool_audit
      become_user: "{{ deploy_user }}"

    - name: Display audit results
      debug:
        msg: "{{ tool_audit.stdout_lines }}"

    - name: Read tool status
      shell: cat /tmp/tool_check/status
      register: tool_status
      ignore_errors: yes

    - name: Install system packages
      apt:
        name: "{{ system_packages }}"
        state: present
        update_cache: yes
      when: tool_status.stdout == "INSTALL_REQUIRED" or force_installation|bool

    - name: Ruby setup script
      copy:
        dest: /tmp/ruby_setup.sh
        mode: '0755'
        content: |
          #!/bin/bash
          set -e
          
          MISSING_TOOLS=$(cat /tmp/tool_check/missing_tools 2>/dev/null || echo "")
          FORCE_INSTALL="{{ force_installation }}"
          
          if echo "$MISSING_TOOLS" | grep -q "rbenv" || echo "$MISSING_TOOLS" | grep -q "ruby" || echo "$MISSING_TOOLS" | grep -q "bundler" || [ "$FORCE_INSTALL" = "true" ]; then
            echo "💎 SETTING UP RUBY ENVIRONMENT..."
            
            # Install rbenv
            if [ ! -d "/home/{{ deploy_user }}/.rbenv" ] || [ "$FORCE_INSTALL" = "true" ]; then
              echo "Installing rbenv..."
              rm -rf /home/{{ deploy_user }}/.rbenv
              git clone https://github.com/rbenv/rbenv.git /home/{{ deploy_user }}/.rbenv
              git clone https://github.com/rbenv/ruby-build.git /home/{{ deploy_user }}/.rbenv/plugins/ruby-build
              
              # Add to bashrc
              if ! grep -q 'rbenv' /home/{{ deploy_user }}/.bashrc; then
                echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> /home/{{ deploy_user }}/.bashrc
                echo 'eval "$(rbenv init -)"' >> /home/{{ deploy_user }}/.bashrc
              fi
              
              chown -R {{ deploy_user }}:{{ deploy_user }} /home/{{ deploy_user }}/.rbenv
            fi
            
            # Install Ruby
            export PATH="/home/{{ deploy_user }}/.rbenv/bin:$PATH"
            eval "$(rbenv init -)"
            
            if ! rbenv versions | grep -q "{{ required_tools.ruby_version }}" || [ "$FORCE_INSTALL" = "true" ]; then
              echo "Installing Ruby {{ required_tools.ruby_version }}..."
              rbenv install {{ required_tools.ruby_version }}
              rbenv global {{ required_tools.ruby_version }}
              rbenv rehash
              
              # Install bundler
              gem install bundler -v {{ required_tools.bundler_version }}
              rbenv rehash
              
              echo "✅ Ruby and Bundler installed"
            fi
          fi

    - name: Execute Ruby setup
      shell: /tmp/ruby_setup.sh
      become_user: "{{ deploy_user }}"
      when: tool_status.stdout == "INSTALL_REQUIRED" or force_installation|bool

    - name: Node.js setup
      shell: |
        if ! command -v node >/dev/null 2>&1 || [ "{{ force_installation }}" = "true" ]; then
          echo "🟢 Installing Node.js..."
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs
          echo "✅ Node.js installed"
        fi
      when: tool_status.stdout == "INSTALL_REQUIRED" or force_installation|bool

    - name: PostgreSQL setup script
      copy:
        dest: /tmp/postgres_setup.sh
        mode: '0755'
        content: |
          #!/bin/bash
          echo "🐘 CONFIGURING POSTGRESQL..."
          systemctl start postgresql
          systemctl enable postgresql
          
          # Create user
          sudo -u postgres psql -c "SELECT 1" > /dev/null 2>&1
          if [ $? -eq 0 ]; then
            sudo -u postgres createuser --createdb {{ deploy_user }} 2>/dev/null || echo "User exists"
            sudo -u postgres psql -c "ALTER USER {{ deploy_user }} WITH PASSWORD 'deploy123';" 2>/dev/null || echo "Password set"
            echo "✅ PostgreSQL configured"
          fi

    - name: Execute PostgreSQL setup
      shell: /tmp/postgres_setup.sh
      when: tool_status.stdout == "INSTALL_REQUIRED" or force_installation|bool

    - name: Final verification
      shell: |
        echo "🔍 FINAL VERIFICATION"
        echo "===================="
        echo "Ruby: $(ruby --version 2>/dev/null || echo 'Not available')"
        echo "Bundler: $(bundle --version 2>/dev/null || echo 'Not available')"
        echo "Node.js: $(node --version 2>/dev/null || echo 'Not available')"
        echo "PostgreSQL: $(psql --version 2>/dev/null || echo 'Not available')"
        
        # Check if all critical tools are available
        if command -v ruby && command -v bundle && command -v node && command -v psql; then
          echo "✅ ALL TOOLS VERIFIED AND READY!"
          echo "READY" > /tmp/tool_check/final_status
        else
          echo "❌ Some tools missing"
          echo "FAILED" > /tmp/tool_check/final_status
          exit 1
        fi
      become_user: "{{ deploy_user }}"

    - name: Display success
      debug:
        msg: |
          🎉 TOOL INSTALLATION COMPLETED! 🎉
          
          ✅ All required tools verified and ready
          ✅ Server prepared for Rails deployment
PLAYBOOK_EOF

                        # Find Ansible and run playbook
                        ANSIBLE_BINARY=""
                        POSSIBLE_PATHS=(
                            "/usr/local/bin/ansible"
                            "/opt/homebrew/bin/ansible"
                            "$HOME/Library/Python/3.9/bin/ansible"
                            "$HOME/.local/bin/ansible"
                        )
                        
                        for path in "${POSSIBLE_PATHS[@]}"; do
                            if [ -f "$path" ]; then
                                ANSIBLE_BINARY="$path"
                                echo "✅ Found Ansible at: $path"
                                break
                            fi
                        done
                        
                        if [ -z "$ANSIBLE_BINARY" ]; then
                            echo "❌ Ansible not found!"
                            exit 1
                        fi
                        
                        ANSIBLE_PLAYBOOK_BINARY="$(dirname $ANSIBLE_BINARY)/ansible-playbook"
                        
                        echo "🚀 Running tool verification..."
                        
                        # Run the tool verification playbook
                        $ANSIBLE_PLAYBOOK_BINARY -i temp_ansible/inventories/${ENVIRONMENT}/hosts \\
                            temp_ansible/playbooks/verify_and_install_tools.yml \\
                            --extra-vars "force_tool_installation=${FORCE_TOOL_INSTALLATION}" \\
                            -v
                        
                        if [ $? -eq 0 ]; then
                            echo "✅ TOOL VERIFICATION COMPLETED!"
                        else
                            echo "❌ TOOL VERIFICATION FAILED!"
                            exit 1
                        fi
                        
                        # Cleanup
                        rm -rf temp_ansible
                    '''
                }
            }
        }
        
        stage('Manual Approval') {
            steps {
                script {
                    def deploymentMessage = """
🚀 READY TO DEPLOY: All tools verified!

Deploy to ${params.ENVIRONMENT} using Ansible?
"""
                    if (params.ENVIRONMENT == 'production') {
                        deploymentMessage = """
⚠️ PRODUCTION DEPLOYMENT ⚠️

✅ All tools verified and ready
🎯 Target: PRODUCTION environment

Are you sure you want to deploy to PRODUCTION?

Build: ${params.BUILD_NUMBER_TO_DEPLOY ?: 'latest'}
Method: Ansible automation
"""
                    }
                    
                    def approver = input message: deploymentMessage,
                                        ok: "Deploy to ${params.ENVIRONMENT}",
                                        submitterParameter: 'APPROVER'
                    
                    env.DEPLOYMENT_APPROVER = approver ?: 'unknown'
                    
                    echo "Deployment approved by: ${env.DEPLOYMENT_APPROVER}"
                    echo "Deploying to: ${params.ENVIRONMENT}"
                    echo "Build to deploy: ${params.BUILD_NUMBER_TO_DEPLOY ?: 'latest'}"
                    echo "Tool check: ${params.SKIP_TOOL_CHECK ? 'Skipped' : 'Completed'}"
                }
            }
        }
        
        stage('Download Artifact') {
            steps {
                script {
                    cleanWs()
                    
                    def buildNumber = params.BUILD_NUMBER_TO_DEPLOY ?: ''
                    def ciJobName = 'hello-rails'
                    
                    echo "Downloading artifact from: ${ciJobName}"
                    
                    try {
                        if (buildNumber) {
                            step([$class: 'CopyArtifact',
                                  projectName: ciJobName,
                                  selector: [$class: 'SpecificBuildSelector', buildNumber: buildNumber],
                                  filter: 'hello-world-app-*.tar.gz',
                                  fingerprintArtifacts: true])
                        } else {
                            step([$class: 'CopyArtifact',
                                  projectName: ciJobName,
                                  selector: [$class: 'StatusBuildSelector', stable: false],
                                  filter: 'hello-world-app-*.tar.gz',
                                  fingerprintArtifacts: true])
                        }
                        
                        sh '''
                            if ls hello-world-app-*.tar.gz 1> /dev/null 2>&1; then
                                echo "✅ Artifact files found:"
                                ls -la hello-world-app-*.tar.gz
                            else
                                echo "❌ No artifact files found!"
                                exit 1
                            fi
                        '''
                        
                    } catch (Exception e) {
                        error("Failed to download artifact: ${e.message}")
                    }
                }
            }
        }
        
        stage('Setup Ansible Environment') {
            steps {
                script {
                    sh '''
                        echo "=== Setting up Ansible environment ==="
                        
                        # Find Ansible binary
                        ANSIBLE_BINARY=""
                        POSSIBLE_PATHS=(
                            "/usr/local/bin/ansible"
                            "/opt/homebrew/bin/ansible"
                            "$HOME/Library/Python/3.9/bin/ansible"
                            "$HOME/.local/bin/ansible"
                        )
                        
                        for path in "${POSSIBLE_PATHS[@]}"; do
                            if [ -f "$path" ]; then
                                ANSIBLE_BINARY="$path"
                                echo "✅ Found Ansible at: $path"
                                break
                            fi
                        done
                        
                        echo "$ANSIBLE_BINARY" > /tmp/ansible_path
                        echo "ANSIBLE_DIR=$(dirname $ANSIBLE_BINARY)" > /tmp/ansible_env
                        
                        # Create Ansible structure
                        mkdir -p ansible/{inventories,playbooks}
                        mkdir -p ansible/inventories/staging
                        mkdir -p ansible/inventories/production
                        
                        # Create staging inventory
                        cat > ansible/inventories/staging/hosts << 'EOF'
[webservers]
staging-server ansible_host=54.210.171.180 ansible_user=deploy

[all:vars]
ansible_ssh_private_key_file=~/.ssh/deploy_key
rails_env=staging
app_name=hello-world-app
deploy_user=deploy
deploy_path=/var/www/hello-world-app
EOF

                        # Create production inventory
                        cat > ansible/inventories/production/hosts << 'EOF'
[webservers]
production-server ansible_host=YOUR_PROD_IP ansible_user=deploy

[all:vars]
ansible_ssh_private_key_file=~/.ssh/deploy_key
rails_env=production
app_name=hello-world-app
deploy_user=deploy
deploy_path=/var/www/hello-world-app
EOF

                        # Create Rails deployment playbook
                        cat > ansible/playbooks/deploy.yml << 'DEPLOY_EOF'
---
- name: Deploy Beautiful Rails Application
  hosts: webservers
  become: yes
  vars:
    app_archive_path: "/tmp/{{ app_name }}-{{ build_number | default('latest') }}.tar.gz"
  
  tasks:
    - name: Upload artifact
      shell: |
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no "{{ local_artifact_path }}" deploy@{{ ansible_host }}:/tmp/{{ app_name }}-{{ build_number }}.tar.gz
      delegate_to: localhost
      become: no

    - name: Create directories
      file:
        path: "{{ deploy_path }}/{{ rails_env }}/current"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0755'

    - name: Extract application
      unarchive:
        src: "{{ app_archive_path }}"
        dest: "{{ deploy_path }}/{{ rails_env }}/current"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        remote_src: yes

    - name: Setup Rails with beautiful UI
      shell: |
        cd {{ deploy_path }}/{{ rails_env }}/current
        
        echo "🎨 Setting up beautiful Rails application..."
        
        # Ruby environment
        export PATH="/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:$PATH"
        eval "$(rbenv init -)"
        export RAILS_ENV={{ rails_env }}
        
        # Install gems
        bundle install --without development test
        
        # Create routes
        cat > config/routes.rb << 'ROUTES_EOF'
Rails.application.routes.draw do
  root 'welcome#index'
  get '/health', to: proc { [200, { 'Content-Type' => 'application/json' }, [{ status: 'ok', environment: Rails.env }.to_json]] }
end
ROUTES_EOF
        
        # Create controller
        mkdir -p app/controllers
        cat > app/controllers/welcome_controller.rb << 'CTRL_EOF'
class WelcomeController < ApplicationController
  def index
    @info = {
      environment: Rails.env,
      rails_version: Rails.version,
      ruby_version: RUBY_VERSION,
      deployed_at: Time.current
    }
  end
end
CTRL_EOF
        
        # Create layout
        mkdir -p app/views/layouts
        cat > app/views/layouts/application.html.erb << 'LAYOUT_EOF'
<!DOCTYPE html>
<html>
  <head>
    <title>Rails Deployment Success</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <style>
      body { font-family: system-ui, sans-serif; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }
      .container { max-width: 1000px; margin: 0 auto; padding: 20px; }
      .header { background: rgba(255,255,255,0.95); padding: 40px; border-radius: 20px; text-align: center; margin-bottom: 30px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); }
      .content { background: rgba(255,255,255,0.95); padding: 30px; border-radius: 20px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); }
      .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 20px 0; }
      .card { background: #f8f9fa; padding: 20px; border-radius: 15px; border-left: 4px solid #28a745; }
      .badge { display: inline-block; padding: 6px 12px; border-radius: 15px; font-size: 0.9em; font-weight: bold; margin: 5px; background: #28a745; color: white; }
      h1 { color: #2563eb; margin: 0; font-size: 2.5em; }
      h3 { color: #374151; margin-top: 0; }
      .status { font-size: 1.3em; color: #28a745; margin: 20px 0; }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1>🚀 Rails Deployment Success!</h1>
        <p class="status">✅ Application Successfully Deployed</p>
      </div>
      <div class="content">
        <%= yield %>
      </div>
    </div>
  </body>
</html>
LAYOUT_EOF
        
        # Create view
        mkdir -p app/views/welcome
        cat > app/views/welcome/index.html.erb << 'VIEW_EOF'
<div class="grid">
  <div class="card">
    <h3>🎯 Deployment Info</h3>
    <% if @info %>
      <p><strong>Environment:</strong> <%= @info[:environment].upcase %></p>
      <p><strong>Deployed:</strong> <%= @info[:deployed_at].strftime("%B %d, %Y at %I:%M %p") %></p>
    <% end %>
  </div>
  
  <div class="card">
    <h3>🛠️ Tech Stack</h3>
    <p><strong>Rails:</strong> <%= Rails.version %></p>
    <p><strong>Ruby:</strong> <%= RUBY_VERSION %></p>
    <p><strong>Environment:</strong> <%= Rails.env %></p>
  </div>
  
  <div class="card">
    <h3>📊 Status</h3>
    <p>✅ Rails Server Running</p>
    <p>✅ Database Connected</p>
    <p>✅ Ready to Serve</p>
  </div>
</div>

<div style="text-align: center; margin-top: 30px; padding: 20px; background: #e8f5e8; border-radius: 15px;">
  <h3>🎉 CI/CD Success!</h3>
  <p>Deployed with Jenkins and Ansible automation</p>
  <span class="badge">Tool Verification</span>
  <span class="badge">Rails Deployment</span>
  <span class="badge">Beautiful UI</span>
</div>
VIEW_EOF
        
        echo "✅ Beautiful Rails UI created"
      become_user: "{{ deploy_user }}"
      environment:
        PATH: "/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:{{ ansible_env.PATH }}"

    - name: Database operations
      shell: |
        cd {{ deploy_path }}/{{ rails_env }}/current
        
        export PATH="/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:$PATH"
        eval "$(rbenv init -)"
        export RAILS_ENV={{ rails_env }}
        
        echo "🗄️ Database operations..."
        
        # Database setup
        RAILS_ENV={{ rails_env }} bundle exec rake db:create 2>/dev/null || echo "Database exists"
        RAILS_ENV={{ rails_env }} bundle exec rake db:migrate
        RAILS_ENV={{ rails_env }} bundle exec rake assets:precompile
        
        echo "✅ Database operations completed"
      become_user: "{{ deploy_user }}"
      environment:
        PATH: "/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:{{ ansible_env.PATH }}"
        RAILS_ENV: "{{ rails_env }}"

    - name: Start Rails server
      shell: |
        # Stop existing servers
        pkill -f 'python.*http.server' || true
        pkill -f 'rails server' || true
        sleep 5
        
        cd {{ deploy_path }}/{{ rails_env }}/current
        
        export PATH="/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:$PATH"
        eval "$(rbenv init -)"
        export RAILS_ENV={{ rails_env }}
        
        echo "🚀 Starting beautiful Rails application..."
        
        # Start Rails server
        nohup bundle exec rails server -e {{ rails_env }} -p 3000 -b 0.0.0.0 > log/rails.log 2>&1 &
        echo $! > tmp/pids/server.pid
        
        sleep 15
        
        if ps aux | grep -v grep | grep 'rails server'; then
          echo "✅ Beautiful Rails UI started successfully"
        else
          echo "❌ Rails server failed to start"
          exit 1
        fi
      become_user: "{{ deploy_user }}"

    - name: Verify deployment
      shell: |
        echo "🔍 VERIFYING BEAUTIFUL RAILS DEPLOYMENT"
        echo "========================================"
        
        # Check server
        if ps aux | grep -v grep | grep 'rails server'; then
          echo "✅ Rails server running"
        fi
        
        if netstat -tlnp | grep :3000; then
          echo "✅ Port 3000 listening"
        fi
        
        # Test UI
        if curl -s http://localhost:3000 | grep -i "deployment.*success"; then
          echo "✅ Beautiful Rails UI confirmed"
        fi
        
        echo "🎨 Beautiful UI live at: http://{{ ansible_host }}:3000"
      become_user: "{{ deploy_user }}"
      ignore_errors: yes

    - name: Success message
      debug:
        msg: |
          🎉 BEAUTIFUL RAILS UI DEPLOYMENT SUCCESS! 🎉
          
          ✨ Your stunning Rails application is now live!
          🌍 Access: http://{{ ansible_host }}:3000/
          🏥 Health: http://{{ ansible_host }}:3000/health
          
          Features deployed:
          ✅ Modern responsive design
          ✅ Deployment dashboard
          ✅ Technical stack display
          ✅ Status indicators
DEPLOY_EOF
                        
                        echo "✅ Ansible deployment structure created"
                    '''
                }
            }
        }
        
        stage('Prepare Deployment') {
            steps {
                script {
                    sh '''
                        # Get artifact info
                        ARTIFACT_FILE=$(ls hello-world-app-*.tar.gz | head -1)
                        BUILD_NUM=$(echo $ARTIFACT_FILE | sed 's/hello-world-app-//; s/.tar.gz//')
                        
                        echo "Artifact: $ARTIFACT_FILE"
                        echo "Build number: $BUILD_NUM"
                        
                        # Create variables file
                        cat > ansible/extra_vars.yml << EOF
build_number: ${BUILD_NUM}
app_archive_path: /tmp/hello-world-app-${BUILD_NUM}.tar.gz
local_artifact_path: $(pwd)/${ARTIFACT_FILE}
environment: ${ENVIRONMENT}
deployed_by: ${DEPLOYMENT_APPROVER}
deployed_at: $(date)
EOF
                        
                        echo "=== Deployment Variables ==="
                        cat ansible/extra_vars.yml
                    '''
                }
            }
        }
        
        stage('Test Ansible Connectivity') {
            steps {
                script {
                    dir('ansible') {
                        sh '''
                            source /tmp/ansible_env
                            ANSIBLE_BINARY=$(cat /tmp/ansible_path)
                            
                            echo "Testing connectivity..."
                            $ANSIBLE_BINARY -i inventories/${ENVIRONMENT}/hosts webservers -m ping
                            
                            if [ $? -eq 0 ]; then
                                echo "✅ Connectivity test passed"
                            else
                                echo "❌ Connectivity test failed"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Deploy Beautiful Rails Application') {
            steps {
                script {
                    dir('ansible') {
                        sh '''
                            source /tmp/ansible_env
                            ANSIBLE_BINARY=$(cat /tmp/ansible_path)
                            ANSIBLE_PLAYBOOK_BINARY="$(dirname $ANSIBLE_BINARY)/ansible-playbook"
                            
                            echo "🚀 Deploying beautiful Rails application..."
                            
                            $ANSIBLE_PLAYBOOK_BINARY -i inventories/${ENVIRONMENT}/hosts playbooks/deploy.yml \\
                                --extra-vars @extra_vars.yml \\
                                -v
                            
                            if [ $? -eq 0 ]; then
                                echo "✅ Beautiful Rails UI deployed successfully!"
                            else
                                echo "❌ Deployment failed"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Post-Deployment Verification') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                    ]) {
                        sh '''
                            echo "🏥 Verifying beautiful Rails UI..."
                            
                            sleep 25
                            
                            MAX_RETRIES=10
                            RETRY_COUNT=0
                            
                            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                                echo "Verification attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
                                
                                if curl -f -s -o /dev/null http://${EC2_HOST}:3000/; then
                                    echo "✅ Beautiful Rails UI is live!"
                                    break
                                else
                                    echo "⏳ Waiting for UI..."
                                    sleep 10
                                    RETRY_COUNT=$((RETRY_COUNT + 1))
                                fi
                            done
                            
                            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                                echo "❌ UI verification failed"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Deployment Summary') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                    ]) {
                        sh '''
                            echo "
🎉 BEAUTIFUL RAILS UI DEPLOYMENT SUCCESS! 🎉
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📊 Deployment Details:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Environment: ${ENVIRONMENT}
Server: ${EC2_HOST}
Approved by: ${DEPLOYMENT_APPROVER}
Build: ${BUILD_NUMBER_TO_DEPLOY:-latest}
Type: ✨ Beautiful Modern Rails UI
URL: http://${EC2_HOST}:3000
Time: $(date)

🎨 UI Features Deployed:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
✨ Modern gradient background
✨ Glassmorphism cards
✨ Responsive design
✨ Deployment dashboard
✨ Technical stack display
✨ Status indicators

🚀 Rails Operations:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
✅ RAILS_ENV=${ENVIRONMENT} rake db:create
✅ RAILS_ENV=${ENVIRONMENT} rake db:migrate
✅ RAILS_ENV=${ENVIRONMENT} rake assets:precompile
✅ Beautiful UI components created
✅ Rails server started

🔗 Access Your Beautiful Application:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🌍 Main UI: http://${EC2_HOST}:3000/
🏥 Health: http://${EC2_HOST}:3000/health
🔧 SSH: ssh deploy@${EC2_HOST}

🎯 SUCCESS: Beautiful Rails UI is now live!
                            "
                        '''
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "✅ Beautiful Rails UI deployment completed successfully!"
        }
        
        failure {
            echo "❌ Deployment failed!"
        }
        
        always {
            script {
                sh '''
                    rm -f hello-world-app-*.tar.gz
                    rm -f ansible/extra_vars.yml
                    rm -rf temp_ansible
                '''
            }
            cleanWs()
        }
    }
}