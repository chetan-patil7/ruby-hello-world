pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['staging', 'production'],
            description: 'Select deployment environment'
        )
        string(
            name: 'BUILD_NUMBER_TO_DEPLOY',
            defaultValue: '',
            description: 'Build number from CI pipeline to deploy (leave empty for latest)'
        )
    }
    
    environment {
        RUBY_VERSION = '3.1.3'
        BUNDLER_VERSION = '2.3.0'
        APP_NAME = 'hello-world-app'
        DEPLOY_USER = 'deploy'
        DEPLOY_PATH = '/var/www/hello-world-app'
    }
    
    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    if (params.ENVIRONMENT == 'production') {
                        input message: 'Are you sure you want to deploy to PRODUCTION?', ok: 'Deploy'
                    }
                    
                    echo "Deploying to: ${params.ENVIRONMENT}"
                    echo "Build to deploy: ${params.BUILD_NUMBER_TO_DEPLOY ?: 'latest'}"
                }
            }
        }
        
        stage('Download Artifact') {
            steps {
                script {
                    if (params.BUILD_NUMBER_TO_DEPLOY) {
                        copyArtifacts(
                            projectName: env.JOB_NAME.replace('.cd', '.ci'),
                            selector: specific(params.BUILD_NUMBER_TO_DEPLOY),
                            filter: 'hello-world-app-*.tar.gz'
                        )
                    } else {
                        copyArtifacts(
                            projectName: env.JOB_NAME.replace('.cd', '.ci'),
                            selector: lastSuccessful(),
                            filter: 'hello-world-app-*.tar.gz'
                        )
                    }
                }
            }
        }
        
        stage('Prepare Deployment Package') {
            steps {
                script {
                    sh '''
                        # Extract the artifact
                        ARTIFACT_FILE=$(ls hello-world-app-*.tar.gz | head -1)
                        echo "Deploying artifact: $ARTIFACT_FILE"
                        
                        # Create deployment directory
                        mkdir -p deployment
                        cd deployment
                        tar -xzf ../$ARTIFACT_FILE
                        
                        # Set deployment metadata
                        echo "$(date)" > DEPLOYMENT_TIMESTAMP
                        echo "${BUILD_NUMBER}" > BUILD_INFO
                        echo "${ENVIRONMENT}" > ENVIRONMENT_INFO
                    '''
                }
            }
        }
        
        stage('Upload to EC2') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(
                            credentialsId: 'ec2-ssh-key',
                            keyFileVariable: 'SSH_KEY',
                            usernameVariable: 'SSH_USER'
                        ),
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                    ]) {
                        sh '''
                            # Create release directory on EC2
                            RELEASE_DIR="${DEPLOY_PATH}/${ENVIRONMENT}/releases/$(date +%Y%m%d%H%M%S)"
                            
                            # Create directory structure on EC2
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no $SSH_USER@$EC2_HOST "
                                mkdir -p $RELEASE_DIR
                                mkdir -p ${DEPLOY_PATH}/${ENVIRONMENT}/shared/log
                                mkdir -p ${DEPLOY_PATH}/${ENVIRONMENT}/shared/tmp
                                mkdir -p ${DEPLOY_PATH}/${ENVIRONMENT}/shared/public/assets
                                mkdir -p ${DEPLOY_PATH}/${ENVIRONMENT}/shared/config
                            "
                            
                            # Upload application files
                            scp -i $SSH_KEY -o StrictHostKeyChecking=no -r deployment/* $SSH_USER@$EC2_HOST:$RELEASE_DIR/
                            
                            # Store release path for later stages
                            echo "$RELEASE_DIR" > release_path.txt
                        '''
                    }
                }
            }
        }
        
        stage('Setup Environment on EC2') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(
                            credentialsId: 'ec2-ssh-key',
                            keyFileVariable: 'SSH_KEY',
                            usernameVariable: 'SSH_USER'
                        ),
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST'),
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-database-url", variable: 'DATABASE_URL'),
                        string(credentialsId: "rails-secret-${params.ENVIRONMENT}", variable: 'SECRET_KEY_BASE')
                    ]) {
                        sh '''
                            RELEASE_DIR=$(cat release_path.txt)
                            
                            # Setup environment on EC2
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no $SSH_USER@$EC2_HOST "
                                cd $RELEASE_DIR
                                
                                # Setup rbenv
                                export PATH=\"\\$HOME/.rbenv/bin:\\$PATH\"
                                eval \"\\$(rbenv init -)\"
                                
                                # Create environment file
                                cat > .env.${ENVIRONMENT} << 'EOF'
RAILS_ENV=${ENVIRONMENT}
DATABASE_URL=${DATABASE_URL}
SECRET_KEY_BASE=${SECRET_KEY_BASE}
RAILS_LOG_TO_STDOUT=true
RAILS_SERVE_STATIC_FILES=true
EOF
                                
                                # Install gems
                                bundle install --deployment --without development test
                                
                                # Create symlinks to shared directories
                                ln -sfn ${DEPLOY_PATH}/${ENVIRONMENT}/shared/log log
                                ln -sfn ${DEPLOY_PATH}/${ENVIRONMENT}/shared/tmp tmp
                                ln -sfn ${DEPLOY_PATH}/${ENVIRONMENT}/shared/public/assets public/assets
                                
                                # Copy environment file to shared config
                                cp .env.${ENVIRONMENT} ${DEPLOY_PATH}/${ENVIRONMENT}/shared/config/
                                ln -sfn ${DEPLOY_PATH}/${ENVIRONMENT}/shared/config/.env.${ENVIRONMENT} .env.${ENVIRONMENT}
                            "
                        '''
                    }
                }
            }
        }
        
        stage('Database Migration') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(
                            credentialsId: 'ec2-ssh-key',
                            keyFileVariable: 'SSH_KEY',
                            usernameVariable: 'SSH_USER'
                        ),
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                    ]) {
                        sh '''
                            RELEASE_DIR=$(cat release_path.txt)
                            
                            # Run database migrations on EC2
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no $SSH_USER@$EC2_HOST "
                                cd $RELEASE_DIR
                                
                                # Setup rbenv
                                export PATH=\"\\$HOME/.rbenv/bin:\\$PATH\"
                                eval \"\\$(rbenv init -)\"
                                
                                # Load environment variables
                                source .env.${ENVIRONMENT}
                                
                                # Create database if it doesn't exist
                                bundle exec rake db:create
                                
                                # Run migrations
                                bundle exec rake db:migrate
                                
                                # Seed database if needed (optional)
                                if [ -f db/seeds.rb ] && [ '${ENVIRONMENT}' != 'production' ]; then
                                    bundle exec rake db:seed
                                fi
                            "
                        '''
                    }
                }
            }
        }
        
        stage('Compile Assets') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(
                            credentialsId: 'ec2-ssh-key',
                            keyFileVariable: 'SSH_KEY',
                            usernameVariable: 'SSH_USER'
                        ),
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                    ]) {
                        sh '''
                            RELEASE_DIR=$(cat release_path.txt)
                            
                            # Compile assets on EC2
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no $SSH_USER@$EC2_HOST "
                                cd $RELEASE_DIR
                                
                                # Setup rbenv
                                export PATH=\"\\$HOME/.rbenv/bin:\\$PATH\"
                                eval \"\\$(rbenv init -)\"
                                
                                # Load environment variables
                                source .env.${ENVIRONMENT}
                                
                                # Precompile assets
                                bundle exec rake assets:precompile
                                
                                # Set proper permissions
                                chmod -R 755 public/assets
                            "
                        '''
                    }
                }
            }
        }
        
        stage('Deploy Application') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(
                            credentialsId: 'ec2-ssh-key',
                            keyFileVariable: 'SSH_KEY',
                            usernameVariable: 'SSH_USER'
                        ),
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                    ]) {
                        sh '''
                            RELEASE_DIR=$(cat release_path.txt)
                            CURRENT_DIR="${DEPLOY_PATH}/${ENVIRONMENT}/current"
                            
                            # Deploy application on EC2
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no $SSH_USER@$EC2_HOST "
                                # Update current symlink
                                ln -sfn $RELEASE_DIR $CURRENT_DIR
                                
                                # Set proper permissions
                                chmod -R 755 $RELEASE_DIR
                                chown -R ${DEPLOY_USER}:${DEPLOY_USER} $RELEASE_DIR
                                
                                echo 'Application deployed to: $CURRENT_DIR'
                            "
                        '''
                    }
                }
            }
        }
        
        stage('Start/Restart Application') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(
                            credentialsId: 'ec2-ssh-key',
                            keyFileVariable: 'SSH_KEY',
                            usernameVariable: 'SSH_USER'
                        ),
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                    ]) {
                        sh '''
                            # Start/restart Rails application on EC2
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no $SSH_USER@$EC2_HOST "
                                cd ${DEPLOY_PATH}/${ENVIRONMENT}/current
                                
                                # Setup rbenv
                                export PATH=\"\\$HOME/.rbenv/bin:\\$PATH\"
                                eval \"\\$(rbenv init -)\"
                                
                                # Load environment variables
                                source .env.${ENVIRONMENT}
                                
                                # Stop existing Rails process if running
                                pkill -f 'rails server' || true
                                
                                # Start Rails server in background
                                nohup bundle exec rails server -e ${ENVIRONMENT} -p 3000 > log/rails.log 2>&1 &
                                
                                # For systemd service (uncomment if using systemd):
                                # sudo systemctl restart hello-world-app-${ENVIRONMENT}
                                
                                # For passenger with nginx (uncomment if using passenger):
                                # sudo service nginx restart
                                
                                echo 'Rails application started successfully'
                            "
                        '''
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(
                            credentialsId: 'ec2-ssh-key',
                            keyFileVariable: 'SSH_KEY',
                            usernameVariable: 'SSH_USER'
                        ),
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                    ]) {
                        sh '''
                            # Wait for application to start
                            sleep 15
                            
                            # Perform health check
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no $SSH_USER@$EC2_HOST "
                                # Check if Rails process is running
                                if pgrep -f 'rails server' > /dev/null; then
                                    echo 'Rails server is running'
                                else
                                    echo 'Rails server is not running'
                                    exit 1
                                fi
                                
                                # Check if application responds
                                if curl -f http://localhost:3000/health 2>/dev/null || curl -f http://localhost:3000/ 2>/dev/null; then
                                    echo 'Health check passed - Application is responding'
                                else
                                    echo 'Health check failed - Application is not responding'
                                    exit 1
                                fi
                            "
                        '''
                    }
                }
            }
        }
        
       
        
        stage('Cleanup Old Releases') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(
                            credentialsId: 'ec2-ssh-key',
                            keyFileVariable: 'SSH_KEY',
                            usernameVariable: 'SSH_USER'
                        ),
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                    ]) {
                        sh '''
                            # Cleanup old releases on EC2
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no $SSH_USER@$EC2_HOST "
                                cd ${DEPLOY_PATH}/${ENVIRONMENT}/releases
                                
                                # Keep only last 5 releases
                                ls -t | tail -n +6 | xargs -r rm -rf
                                
                                echo 'Old releases cleaned up'
                            "
                        '''
                    }
                }
            }
        }
        
        stage('Send Notifications') {
            steps {
                script {
                    // Email notification (optional)
                    try {
                        withCredentials([
                            usernamePassword(
                                credentialsId: 'smtp-credentials',
                                usernameVariable: 'SMTP_USER',
                                passwordVariable: 'SMTP_PASS'
                            )
                        ]) {
                            emailext (
                                subject: "✅ Deployment Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                                body: """
                                    <h2>Deployment Successful!</h2>
                                    <p><strong>Environment:</strong> ${params.ENVIRONMENT}</p>
                                    <p><strong>Build Number:</strong> ${env.BUILD_NUMBER}</p>
                                    <p><strong>Deployed At:</strong> ${new Date()}</p>
                                    <p><strong>Jenkins Job:</strong> ${env.JOB_NAME}</p>
                                """,
                                to: "team@company.com",
                                mimeType: 'text/html'
                            )
                        }
                    } catch (Exception e) {
                        echo "Email notification failed: ${e.message}"
                    }
                    
                    // Slack notification (optional)
                    try {
                        withCredentials([
                            string(credentialsId: 'slack-webhook-url', variable: 'SLACK_WEBHOOK')
                        ]) {
                            sh '''
                                curl -X POST -H 'Content-type: application/json' \
                                    --data '{"text":"✅ Deployment Success: hello-world-app to '${ENVIRONMENT}' - Build #'${BUILD_NUMBER}'"}' \
                                    $SLACK_WEBHOOK
                            '''
                        }
                    } catch (Exception e) {
                        echo "Slack notification failed: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Clean up local files
                sh '''
                    rm -rf deployment
                    rm -f hello-world-app-*.tar.gz
                    rm -f release_path.txt
                '''
            }
            
            cleanWs()
        }
        
        success {
            echo "🎉 Deployment to ${params.ENVIRONMENT} completed successfully!"
        }
        
        failure {
            echo "❌ Deployment to ${params.ENVIRONMENT} failed!"
            
            script {
                // Send failure notification
                try {
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'smtp-credentials',
                            usernameVariable: 'SMTP_USER',
                            passwordVariable: 'SMTP_PASS'
                        )
                    ]) {
                        emailext (
                            subject: "❌ Deployment Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                            body: """
                                <h2>Deployment Failed!</h2>
                                <p><strong>Environment:</strong> ${params.ENVIRONMENT}</p>
                                <p><strong>Build Number:</strong> ${env.BUILD_NUMBER}</p>
                                <p><strong>Failed At:</strong> ${new Date()}</p>
                                <p><strong>Jenkins Job:</strong> ${env.JOB_NAME}</p>
                                <p><strong>Console Output:</strong> ${env.BUILD_URL}console</p>
                            """,
                            to: "team@company.com",
                            mimeType: 'text/html'
                        )
                    }
                } catch (Exception e) {
                    echo "Failed to send failure notification: ${e.message}"
                }
                
                // Rollback logic
                withCredentials([
                    sshUserPrivateKey(
                        credentialsId: 'ec2-ssh-key',
                        keyFileVariable: 'SSH_KEY',
                        usernameVariable: 'SSH_USER'
                    ),
                    string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                ]) {
                    sh '''
                        echo "Consider rolling back to previous release..."
                        # Automatic rollback can be implemented here
                        # ssh -i $SSH_KEY $SSH_USER@$EC2_HOST "
                        #     RELEASES_DIR="${DEPLOY_PATH}/${ENVIRONMENT}/releases"
                        #     PREVIOUS_RELEASE=$(ls -t $RELEASES_DIR | sed -n 2p)
                        #     if [ -n "$PREVIOUS_RELEASE" ]; then
                        #         ln -sfn $RELEASES_DIR/$PREVIOUS_RELEASE ${DEPLOY_PATH}/${ENVIRONMENT}/current
                        #         echo "Rolled back to previous release: $PREVIOUS_RELEASE"
                        #     fi
                        # "
                    '''
                }
            }
        }
    }
}