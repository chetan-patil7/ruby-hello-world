pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['staging', 'production'],
            description: 'Select deployment environment'
        )
        string(
            name: 'BUILD_NUMBER_TO_DEPLOY',
            defaultValue: '',
            description: 'Build number from CI pipeline to deploy (leave empty for latest)'
        )
        booleanParam(
            name: 'SKIP_SERVER_SETUP',
            defaultValue: true,
            description: 'Skip server setup (uncheck for first deployment)'
        )
        booleanParam(
            name: 'FORCE_TOOL_INSTALLATION',
            defaultValue: false,
            description: 'Force reinstallation of all tools (even if already installed)'
        )
    }
    
    environment {
        APP_NAME = 'hello-world-app'
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_STDOUT_CALLBACK = 'yaml'
    }
    
    stages {
        stage('Manual Approval') {
            steps {
                script {
                    def deploymentMessage = "Deploy to ${params.ENVIRONMENT} using Ansible?"
                    if (params.ENVIRONMENT == 'production') {
                        deploymentMessage = "‚ö†Ô∏è PRODUCTION DEPLOYMENT ‚ö†Ô∏è\n\nAre you sure you want to deploy to PRODUCTION?\n\nBuild: ${params.BUILD_NUMBER_TO_DEPLOY ?: 'latest'}\nMethod: Ansible automation"
                    }
                    
                    def approver = input message: deploymentMessage,
                                        ok: "Deploy to ${params.ENVIRONMENT}",
                                        submitterParameter: 'APPROVER'
                    
                    env.DEPLOYMENT_APPROVER = approver ?: 'unknown'
                    
                    echo "Deployment approved by: ${env.DEPLOYMENT_APPROVER}"
                    echo "Deploying to: ${params.ENVIRONMENT}"
                    echo "Build to deploy: ${params.BUILD_NUMBER_TO_DEPLOY ?: 'latest'}"
                    echo "Server setup: ${params.SKIP_SERVER_SETUP ? 'Skip' : 'Run'}"
                    echo "Force tool installation: ${params.FORCE_TOOL_INSTALLATION}"
                }
            }
        }
        
        stage('Download Artifact') {
            steps {
                script {
                    cleanWs()
                    
                    def buildNumber = params.BUILD_NUMBER_TO_DEPLOY ?: ''
                    def ciJobName = 'hello-rails'
                    
                    echo "Downloading artifact from: ${ciJobName}"
                    
                    try {
                        if (buildNumber) {
                            step([$class: 'CopyArtifact',
                                  projectName: ciJobName,
                                  selector: [$class: 'SpecificBuildSelector', buildNumber: buildNumber],
                                  filter: 'hello-world-app-*.tar.gz',
                                  fingerprintArtifacts: true])
                        } else {
                            step([$class: 'CopyArtifact',
                                  projectName: ciJobName,
                                  selector: [$class: 'StatusBuildSelector', stable: false],
                                  filter: 'hello-world-app-*.tar.gz',
                                  fingerprintArtifacts: true])
                        }
                        
                        sh '''
                            if ls hello-world-app-*.tar.gz 1> /dev/null 2>&1; then
                                echo "‚úÖ Artifact files found:"
                                ls -la hello-world-app-*.tar.gz
                            else
                                echo "‚ùå No artifact files found!"
                                exit 1
                            fi
                        '''
                        
                    } catch (Exception e) {
                        error("Failed to download artifact: ${e.message}")
                    }
                }
            }
        }
        
        stage('Setup Ansible Environment') {
            steps {
                script {
                    sh '''
                        # Debug current location
                        echo "=== Debug Information ==="
                        echo "Current directory: $(pwd)"
                        echo "Files in current directory:"
                        ls -la
                        
                        # Find Ansible binary directly
                        echo "Locating Ansible installation..."
                        
                        # Check multiple possible locations
                        ANSIBLE_BINARY=""
                        POSSIBLE_PATHS=(
                            "/usr/local/bin/ansible"
                            "/opt/homebrew/bin/ansible"
                            "$HOME/Library/Python/3.9/bin/ansible"
                            "$HOME/.local/bin/ansible"
                        )
                        
                        for path in "${POSSIBLE_PATHS[@]}"; do
                            if [ -f "$path" ]; then
                                ANSIBLE_BINARY="$path"
                                echo "‚úÖ Found Ansible at: $path"
                                break
                            fi
                        done
                        
                        # Test Ansible with direct path
                        echo "Testing Ansible..."
                        $ANSIBLE_BINARY --version
                        
                        # Store the path for later stages
                        echo "$ANSIBLE_BINARY" > /tmp/ansible_path
                        echo "ANSIBLE_DIR=$(dirname $ANSIBLE_BINARY)" > /tmp/ansible_env
                        
                        # Create Ansible structure with tool installation checks
                        echo "Creating Ansible structure with tool checks..."
                        mkdir -p ansible/{inventories,playbooks}
                        mkdir -p ansible/inventories/staging
                        
                        # Create inventory file
                        cat > ansible/inventories/staging/hosts << 'EOF'
[webservers]
staging-server ansible_host=3.237.64.25 ansible_user=deploy

[all:vars]
ansible_ssh_private_key_file=~/.ssh/deploy_key
rails_env=staging
app_name=hello-world-app
deploy_user=deploy
deploy_path=/var/www/hello-world-app
EOF

                        # Create comprehensive deployment playbook with tool checks
                        cat > ansible/playbooks/deploy.yml << 'EOF'
---
- name: Rails Application Deployment with Tool Management
  hosts: webservers
  become: yes
  vars:
    app_archive_path: "/tmp/{{ app_name }}-{{ build_number | default('latest') }}.tar.gz"
    force_installation: "{{ force_tool_installation | default(false) }}"
    
    # Required tools configuration
    required_tools:
      ruby_version: "3.1.3"
      bundler_version: "2.3.0"
      node_version: "18.x"
      postgres_version: "14"
    
    # System packages required
    system_packages:
      - curl
      - wget
      - git
      - build-essential
      - libssl-dev
      - libreadline-dev
      - zlib1g-dev
      - libyaml-dev
      - libxml2-dev
      - libxslt1-dev
      - libcurl4-openssl-dev
      - libffi-dev
      - postgresql
      - postgresql-contrib
      - libpq-dev
      - nodejs
      - npm
      - python3
      - python3-pip
      - unzip
      - htop
      - tree
      - vim
      - nano
  
  tasks:
    - name: Upload artifact to server
      shell: |
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no "{{ local_artifact_path }}" deploy@{{ ansible_host }}:/tmp/{{ app_name }}-{{ build_number }}.tar.gz
      delegate_to: localhost
      become: no

    - name: Check System Tools Installation Status
      shell: |
        echo "üîç SYSTEM TOOLS AUDIT"
        echo "===================="
        
        # Check system packages
        echo "üì¶ System Packages:"
        MISSING_PACKAGES=""
        for pkg in curl wget git build-essential postgresql nodejs python3 unzip; do
          if dpkg -l | grep -q "^ii.*$pkg "; then
            echo "  ‚úÖ $pkg - installed"
          else
            echo "  ‚ùå $pkg - missing"
            MISSING_PACKAGES="$MISSING_PACKAGES $pkg"
          fi
        done
        
        # Check Ruby installation
        echo ""
        echo "üíé Ruby Environment:"
        if command -v ruby >/dev/null 2>&1; then
          RUBY_VERSION=$(ruby --version)
          echo "  ‚úÖ Ruby - $RUBY_VERSION"
        else
          echo "  ‚ùå Ruby - not installed"
          MISSING_PACKAGES="$MISSING_PACKAGES ruby"
        fi
        
        # Check rbenv
        if [ -d "/home/{{ deploy_user }}/.rbenv" ]; then
          echo "  ‚úÖ rbenv - installed"
        else
          echo "  ‚ùå rbenv - not installed"
        fi
        
        # Check bundler
        if command -v bundle >/dev/null 2>&1; then
          BUNDLER_VERSION=$(bundle --version)
          echo "  ‚úÖ Bundler - $BUNDLER_VERSION"
        else
          echo "  ‚ùå Bundler - not installed"
        fi
        
        # Check Node.js
        echo ""
        echo "üü¢ Node.js Environment:"
        if command -v node >/dev/null 2>&1; then
          NODE_VERSION=$(node --version)
          echo "  ‚úÖ Node.js - $NODE_VERSION"
        else
          echo "  ‚ùå Node.js - not installed"
        fi
        
        if command -v npm >/dev/null 2>&1; then
          NPM_VERSION=$(npm --version)
          echo "  ‚úÖ npm - $NPM_VERSION"
        else
          echo "  ‚ùå npm - not installed"
        fi
        
        # Check PostgreSQL
        echo ""
        echo "üêò PostgreSQL:"
        if command -v psql >/dev/null 2>&1; then
          PSQL_VERSION=$(psql --version)
          echo "  ‚úÖ PostgreSQL client - $PSQL_VERSION"
        else
          echo "  ‚ùå PostgreSQL client - not installed"
        fi
        
        if systemctl is-active postgresql >/dev/null 2>&1; then
          echo "  ‚úÖ PostgreSQL service - running"
        else
          echo "  ‚ùå PostgreSQL service - not running"
        fi
        
        # Check Python
        echo ""
        echo "üêç Python Environment:"
        if command -v python3 >/dev/null 2>&1; then
          PYTHON_VERSION=$(python3 --version)
          echo "  ‚úÖ Python3 - $PYTHON_VERSION"
        else
          echo "  ‚ùå Python3 - not installed"
        fi
        
        if command -v pip3 >/dev/null 2>&1; then
          PIP_VERSION=$(pip3 --version)
          echo "  ‚úÖ pip3 - $PIP_VERSION"
        else
          echo "  ‚ùå pip3 - not installed"
        fi
        
        # Store missing packages for installation
        echo "$MISSING_PACKAGES" > /tmp/missing_packages.txt
        
        echo ""
        echo "üìã AUDIT COMPLETE"
        if [ -n "$MISSING_PACKAGES" ]; then
          echo "‚ùå Missing tools detected - installation required"
        else
          echo "‚úÖ All required tools are installed"
        fi
      register: tool_audit
      become_user: "{{ deploy_user }}"

    - name: Display tool audit results
      debug:
        msg: "{{ tool_audit.stdout_lines }}"

    - name: Install Missing System Packages
      shell: |
        MISSING_PACKAGES=$(cat /tmp/missing_packages.txt || echo "")
        FORCE_INSTALL="{{ force_installation }}"
        
        if [ -n "$MISSING_PACKAGES" ] || [ "$FORCE_INSTALL" = "true" ]; then
          echo "üì• Installing system packages..."
          apt update
          
          # Install system packages
          apt install -y {{ system_packages | join(' ') }}
          
          echo "‚úÖ System packages installation completed"
        else
          echo "‚è≠Ô∏è  Skipping system package installation - all packages present"
        fi
      when: tool_audit.stdout is defined

    - name: Setup Ruby Environment (rbenv + Ruby + Bundler)
      shell: |
        FORCE_INSTALL="{{ force_installation }}"
        
        # Check if rbenv exists
        if [ ! -d "/home/{{ deploy_user }}/.rbenv" ] || [ "$FORCE_INSTALL" = "true" ]; then
          echo "üíé Installing rbenv and Ruby {{ required_tools.ruby_version }}..."
          
          # Install rbenv
          if [ ! -d "/home/{{ deploy_user }}/.rbenv" ]; then
            git clone https://github.com/rbenv/rbenv.git /home/{{ deploy_user }}/.rbenv
            git clone https://github.com/rbenv/ruby-build.git /home/{{ deploy_user }}/.rbenv/plugins/ruby-build
            
            # Add to bashrc if not already present
            if ! grep -q 'rbenv' /home/{{ deploy_user }}/.bashrc; then
              echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> /home/{{ deploy_user }}/.bashrc
              echo 'eval "$(rbenv init -)"' >> /home/{{ deploy_user }}/.bashrc
            fi
            
            chown -R {{ deploy_user }}:{{ deploy_user }} /home/{{ deploy_user }}/.rbenv
          fi
          
          # Install Ruby
          export PATH="/home/{{ deploy_user }}/.rbenv/bin:$PATH"
          eval "$(rbenv init -)"
          
          if ! rbenv versions | grep -q "{{ required_tools.ruby_version }}" || [ "$FORCE_INSTALL" = "true" ]; then
            rbenv install {{ required_tools.ruby_version }}
            rbenv global {{ required_tools.ruby_version }}
            rbenv rehash
            
            # Install bundler
            gem install bundler -v {{ required_tools.bundler_version }}
            rbenv rehash
            
            echo "‚úÖ Ruby {{ required_tools.ruby_version }} and Bundler {{ required_tools.bundler_version }} installed"
          else
            echo "‚úÖ Ruby {{ required_tools.ruby_version }} already installed"
          fi
        else
          echo "‚è≠Ô∏è  Skipping Ruby installation - rbenv already present"
        fi
      become_user: "{{ deploy_user }}"
      environment:
        PATH: "/home/{{ deploy_user }}/.rbenv/bin:{{ ansible_env.PATH }}"

    - name: Setup Node.js Environment
      shell: |
        FORCE_INSTALL="{{ force_installation }}"
        
        if ! command -v node >/dev/null 2>&1 || [ "$FORCE_INSTALL" = "true" ]; then
          echo "üü¢ Installing Node.js {{ required_tools.node_version }}..."
          
          # Install NodeSource repository
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs
          
          # Verify installation
          NODE_VERSION=$(node --version)
          NPM_VERSION=$(npm --version)
          
          echo "‚úÖ Node.js installed: $NODE_VERSION"
          echo "‚úÖ npm installed: $NPM_VERSION"
        else
          echo "‚è≠Ô∏è  Skipping Node.js installation - already present"
        fi

    - name: Configure PostgreSQL
      shell: |
        echo "üêò Configuring PostgreSQL..."
        
        # Start PostgreSQL service
        systemctl start postgresql
        systemctl enable postgresql
        
        # Create database user if doesn't exist
        sudo -u postgres psql -c "
          DO \$\$
          BEGIN
            IF NOT EXISTS (SELECT FROM pg_user WHERE usename = '{{ deploy_user }}') THEN
              CREATE USER {{ deploy_user }} WITH PASSWORD 'deploy123';
              ALTER USER {{ deploy_user }} CREATEDB;
            END IF;
          END
          \$\$;
        " || echo "Database user already exists or creation failed"
        
        echo "‚úÖ PostgreSQL configuration completed"

    - name: Install Additional Development Tools
      shell: |
        echo "üõ†Ô∏è  Installing additional development tools..."
        
        # Install useful development packages
        apt install -y redis-server imagemagick libmagickwand-dev
        
        # Start Redis
        systemctl start redis-server
        systemctl enable redis-server
        
        echo "‚úÖ Additional tools installed"

    - name: Create deployment directories
      file:
        path: "{{ deploy_path }}/{{ rails_env }}/current"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0755'

    - name: Extract application
      unarchive:
        src: "{{ app_archive_path }}"
        dest: "{{ deploy_path }}/{{ rails_env }}/current"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        remote_src: yes

    - name: Install Rails application dependencies
      shell: |
        cd {{ deploy_path }}/{{ rails_env }}/current
        
        echo "üì¶ Installing Rails application dependencies..."
        
        # Set up Ruby environment
        export PATH="/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:$PATH"
        eval "$(rbenv init -)"
        
        # Install Ruby gems
        bundle install --deployment --without development test
        
        # Install Node.js dependencies if package.json exists
        if [ -f "package.json" ]; then
          echo "üì¶ Installing Node.js dependencies..."
          npm install --production
        fi
        
        echo "‚úÖ Application dependencies installed"
      become_user: "{{ deploy_user }}"
      environment:
        PATH: "/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:{{ ansible_env.PATH }}"

    - name: Rails Database Operations
      shell: |
        cd {{ deploy_path }}/{{ rails_env }}/current
        
        export PATH="/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:$PATH"
        eval "$(rbenv init -)"
        export RAILS_ENV={{ rails_env }}
        
        echo "üóÑÔ∏è  Performing Rails database operations..."
        
        # Create database
        echo "=== RAILS_ENV={{ rails_env }} bundle exec rake db:create ==="
        RAILS_ENV={{ rails_env }} bundle exec rake db:create 2>/dev/null || echo "Database already exists"
        
        # Run migrations
        echo "=== RAILS_ENV={{ rails_env }} bundle exec rake db:migrate ==="
        RAILS_ENV={{ rails_env }} bundle exec rake db:migrate
        
        # Precompile assets
        echo "=== RAILS_ENV={{ rails_env }} bundle exec rake assets:precompile ==="
        RAILS_ENV={{ rails_env }} bundle exec rake assets:precompile
        
        echo "‚úÖ Rails database operations completed"
      become_user: "{{ deploy_user }}"
      environment:
        PATH: "/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:{{ ansible_env.PATH }}"
        RAILS_ENV: "{{ rails_env }}"

    - name: Stop existing servers
      shell: |
        pkill -f 'python.*http.server' || true
        pkill -f 'rails server' || true
        pkill -f 'puma' || true
        sleep 3
      become_user: "{{ deploy_user }}"
      ignore_errors: yes

    - name: Start Rails application
      shell: |
        cd {{ deploy_path }}/{{ rails_env }}/current
        
        export PATH="/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:$PATH"
        eval "$(rbenv init -)"
        export RAILS_ENV={{ rails_env }}
        
        echo "üöÄ Starting Rails application..."
        nohup bundle exec rails server -e {{ rails_env }} -p 3000 -b 0.0.0.0 > log/rails.log 2>&1 &
        echo $! > tmp/pids/rails.pid
        
        sleep 10
        echo "‚úÖ Rails application started"
      become_user: "{{ deploy_user }}"
      environment:
        PATH: "/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:{{ ansible_env.PATH }}"
        RAILS_ENV: "{{ rails_env }}"

    - name: Verify deployment and tools
      shell: |
        echo "üîç FINAL VERIFICATION"
        echo "===================="
        
        # Check server status
        if ps aux | grep -v grep | grep 'rails server'; then
          echo "‚úÖ Rails server is running"
        else
          echo "‚ùå Rails server not running"
        fi
        
        if netstat -tlnp | grep :3000; then
          echo "‚úÖ Port 3000 is listening"
        else
          echo "‚ùå Port 3000 not listening"
        fi
        
        # Check tools final status
        echo ""
        echo "üõ†Ô∏è  TOOLS SUMMARY:"
        echo "Ruby: $(ruby --version 2>/dev/null || echo 'Not available')"
        echo "Bundler: $(bundle --version 2>/dev/null || echo 'Not available')"
        echo "Node.js: $(node --version 2>/dev/null || echo 'Not available')"
        echo "PostgreSQL: $(psql --version 2>/dev/null || echo 'Not available')"
        echo "Python: $(python3 --version 2>/dev/null || echo 'Not available')"
        
        # Check database connectivity
        cd {{ deploy_path }}/{{ rails_env }}/current
        export PATH="/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:$PATH"
        eval "$(rbenv init -)"
        export RAILS_ENV={{ rails_env }}
        
        echo ""
        echo "üóÑÔ∏è  DATABASE STATUS:"
        RAILS_ENV={{ rails_env }} bundle exec rails runner "
          begin
            ActiveRecord::Base.connection.active?
            puts '‚úÖ Database connection: Active'
            puts 'üìä Total tables: ' + ActiveRecord::Base.connection.tables.count.to_s
          rescue => e
            puts '‚ùå Database connection failed: ' + e.message
          end
        " 2>/dev/null || echo "Could not test database connection"
        
        echo ""
        echo "üìã DEPLOYMENT SUMMARY:"
        echo "‚úÖ All required tools verified and installed"
        echo "‚úÖ Rails application dependencies installed"
        echo "‚úÖ Database operations completed"
        echo "‚úÖ Rails server started and verified"
        echo "üåê Application URL: http://{{ ansible_host }}:3000"
      become_user: "{{ deploy_user }}"
      ignore_errors: yes

    - name: Display deployment success
      debug:
        msg: |
          üéâ DEPLOYMENT WITH TOOL MANAGEMENT COMPLETED! üéâ
          
          üõ†Ô∏è  Tools Installation Summary:
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          ‚úÖ System packages verified/installed
          ‚úÖ Ruby {{ required_tools.ruby_version }} with rbenv
          ‚úÖ Bundler {{ required_tools.bundler_version }}
          ‚úÖ Node.js {{ required_tools.node_version }}
          ‚úÖ PostgreSQL {{ required_tools.postgres_version }}
          ‚úÖ Python 3 with pip
          ‚úÖ Redis server
          ‚úÖ Development tools (git, curl, etc.)
          
          üöÄ Application Deployment:
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          ‚úÖ Rails dependencies installed
          ‚úÖ Database created and migrated
          ‚úÖ Assets precompiled
          ‚úÖ Rails server started
          
          üîó Access Information:
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          URL: http://{{ ansible_host }}:3000
          SSH: ssh {{ deploy_user }}@{{ ansible_host }}
EOF
                        
                        echo "‚úÖ Ansible structure with tool management created"
                    '''
                }
            }
        }
        
        stage('Prepare Deployment') {
            steps {
                script {
                    sh '''
                        # Get artifact info
                        ARTIFACT_FILE=$(ls hello-world-app-*.tar.gz | head -1)
                        BUILD_NUM=$(echo $ARTIFACT_FILE | sed 's/hello-world-app-//; s/.tar.gz//')
                        
                        echo "Artifact: $ARTIFACT_FILE"
                        echo "Build number: $BUILD_NUM"
                        
                        # Copy artifact to /tmp for local access
                        cp $ARTIFACT_FILE /tmp/hello-world-app-${BUILD_NUM}.tar.gz
                        
                        # Also keep the artifact in workspace for SCP transfer
                        echo "Artifact location: $(pwd)/$ARTIFACT_FILE"
                        
                        # Create ansible variables file
                        cat > ansible/extra_vars.yml << EOF
build_number: ${BUILD_NUM}
app_archive_path: /tmp/hello-world-app-${BUILD_NUM}.tar.gz
local_artifact_path: $(pwd)/${ARTIFACT_FILE}
environment: ${ENVIRONMENT}
deployed_by: ${DEPLOYMENT_APPROVER}
deployed_at: $(date)
force_tool_installation: ${FORCE_TOOL_INSTALLATION}
EOF
                        
                        echo "=== Deployment Variables ==="
                        cat ansible/extra_vars.yml
                    '''
                }
            }
        }
        
        stage('Test Ansible Connectivity') {
            steps {
                script {
                    dir('ansible') {
                        sh '''
                            # Load Ansible path
                            source /tmp/ansible_env
                            ANSIBLE_BINARY=$(cat /tmp/ansible_path)
                            
                            echo "Testing Ansible connectivity..."
                            echo "Using Ansible binary: $ANSIBLE_BINARY"
                            echo "Using inventory: inventories/${ENVIRONMENT}/hosts"
                            
                            # Test ping with direct binary path
                            $ANSIBLE_BINARY -i inventories/${ENVIRONMENT}/hosts webservers -m ping
                            
                            if [ $? -eq 0 ]; then
                                echo "‚úÖ Ansible connectivity test passed"
                            else
                                echo "‚ùå Ansible connectivity test failed"
                                echo "Debugging information:"
                                echo "Current directory: $(pwd)"
                                echo "Inventory file contents:"
                                cat inventories/${ENVIRONMENT}/hosts
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Deploy with Tool Management') {
            steps {
                script {
                    dir('ansible') {
                        sh '''
                            # Load Ansible path
                            source /tmp/ansible_env
                            ANSIBLE_BINARY=$(cat /tmp/ansible_path)
                            ANSIBLE_PLAYBOOK_BINARY="$(dirname $ANSIBLE_BINARY)/ansible-playbook"
                            
                            echo "üöÄ Starting comprehensive deployment with tool management..."
                            echo "Environment: ${ENVIRONMENT}"
                            echo "Using binary: $ANSIBLE_PLAYBOOK_BINARY"
                            echo "Force tool installation: ${FORCE_TOOL_INSTALLATION}"
                            echo "Deploying artifact: $(cat extra_vars.yml | grep app_archive_path)"
                            
                            # Run deployment playbook with tool management
                            $ANSIBLE_PLAYBOOK_BINARY -i inventories/${ENVIRONMENT}/hosts playbooks/deploy.yml \
                                --extra-vars @extra_vars.yml \
                                -v
                            
                            if [ $? -eq 0 ]; then
                                echo "‚úÖ Comprehensive deployment with tool management completed successfully"
                            else
                                echo "‚ùå Deployment failed"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Post-Deployment Verification') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                    ]) {
                        sh '''
                            echo "üè• Performing comprehensive post-deployment verification..."
                            
                            # Wait for application to start
                            sleep 20
                            
                            # Health check with retries
                            MAX_RETRIES=15
                            RETRY_COUNT=0
                            
                            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                                echo "Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
                                
                                if curl -f -s -o /dev/null http://${EC2_HOST}:3000/health || curl -f -s -o /dev/null http://${EC2_HOST}:3000/; then
                                    echo "‚úÖ Application is responding!"
                                    
                                    # Additional verification
                                    RESPONSE=$(curl -s http://${EC2_HOST}:3000 | head -c 200)
                                    if echo "$RESPONSE" | grep -i "rails\\|application\\|welcome" > /dev/null; then
                                        echo "‚úÖ Rails application is serving content correctly"
                                    fi
                                    break
                                else
                                    echo "‚è≥ Application not ready, retrying in 10 seconds..."
                                    sleep 10
                                    RETRY_COUNT=$((RETRY_COUNT + 1))
                                fi
                            done
                            
                            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                                echo "‚ùå Health check failed after $MAX_RETRIES attempts"
                                echo "üîß Check application logs: ssh deploy@${EC2_HOST} 'tail -50 /var/www/hello-world-app/staging/current/log/rails.log'"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Deployment Summary') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                    ]) {
                        sh '''
                            echo "
üéâ COMPREHENSIVE DEPLOYMENT WITH TOOL MANAGEMENT COMPLETED! üéâ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä Deployment Details:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Environment: ${ENVIRONMENT}
Server: ${EC2_HOST}
Approved by: ${DEPLOYMENT_APPROVER}
Build: ${BUILD_NUMBER_TO_DEPLOY:-latest}
Method: Ansible automation with tool management
Application URL: http://${EC2_HOST}:3000
Deployment time: $(date)

üõ†Ô∏è  Tools Verified/Installed:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ System packages (curl, wget, git, build-essential, etc.)
‚úÖ Ruby 3.1.3 with rbenv
‚úÖ Bundler 2.3.0
‚úÖ Node.js 18.x with npm
‚úÖ PostgreSQL 14 with client tools
‚úÖ Python 3 with pip
‚úÖ Redis server
‚úÖ ImageMagick and development libraries

üöÄ Rails Operations Completed:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ bundle install --deployment
‚úÖ RAILS_ENV=${ENVIRONMENT} bundle exec rake db:create
‚úÖ RAILS_ENV=${ENVIRONMENT} bundle exec rake db:migrate
‚úÖ RAILS_ENV=${ENVIRONMENT} bundle exec rake assets:precompile
‚úÖ Rails server started and verified

üîó Access Information:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üåê Application URL: http://${EC2_HOST}:3000
üîß SSH Access: ssh deploy@${EC2_HOST}
üìã Application Logs: ssh deploy@${EC2_HOST} 'tail -f /var/www/hello-world-app/staging/current/log/rails.log'
üîÑ Restart Rails: ssh deploy@${EC2_HOST} 'cd /var/www/hello-world-app/staging/current && bundle exec rails server -e ${ENVIRONMENT} -d'

üí° Tool Management Features:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîç Automatic tool detection and installation
‚ö° Skip installation if tools already present
üîÑ Force reinstallation option available
üìä Comprehensive tool audit and verification
‚úÖ Production-ready development environment
                            "
                        '''
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "‚úÖ Comprehensive deployment with tool management to ${params.ENVIRONMENT} completed successfully!"
            
            script {
                try {
                    withCredentials([
                        string(credentialsId: 'slack-webhook-url', variable: 'SLACK_WEBHOOK')
                    ]) {
                        sh '''
                            curl -X POST -H 'Content-type: application/json' \
                                --data '{"text":"‚úÖ Tool-Managed Deployment Success: '${APP_NAME}' to '${ENVIRONMENT}' - Build #'${BUILD_NUMBER}' (by '${DEPLOYMENT_APPROVER}') - All tools verified/installed"}' \
                                $SLACK_WEBHOOK
                        '''
                    }
                } catch (Exception e) {
                    echo "Notification failed: ${e.message}"
                }
            }
        }
        
        failure {
            echo "‚ùå Deployment with tool management to ${params.ENVIRONMENT} failed!"
            
            script {
                try {
                    withCredentials([
                        string(credentialsId: 'slack-webhook-url', variable: 'SLACK_WEBHOOK')
                    ]) {
                        sh '''
                            curl -X POST -H 'Content-type: application/json' \
                                --data '{"text":"‚ùå Tool-Managed Deployment Failed: '${APP_NAME}' to '${ENVIRONMENT}' - Build #'${BUILD_NUMBER}' (by '${DEPLOYMENT_APPROVER}') - Check tool installation"}' \
                                $SLACK_WEBHOOK
                        '''
                    }
                } catch (Exception e) {
                    echo "Failed notification: ${e.message}"
                }
            }
        }
        
        always {
            script {
                sh '''
                    rm -f hello-world-app-*.tar.gz
                    rm -f ansible/extra_vars.yml
                '''
            }
            cleanWs()
        }
    }
}