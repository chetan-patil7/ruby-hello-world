pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['staging', 'production'],
            description: 'Select deployment environment'
        )
        string(
            name: 'BUILD_NUMBER_TO_DEPLOY',
            defaultValue: '',
            description: 'Build number from CI pipeline to deploy (leave empty for latest)'
        )
        booleanParam(
            name: 'SKIP_SERVER_SETUP',
            defaultValue: true,
            description: 'Skip server setup (uncheck for first deployment)'
        )
        choice(
            name: 'POST_DEPLOY_ACTION',
            choices: ['none', 'create_user'],
            description: 'Action to perform after deployment'
        )
    }
    
    environment {
        APP_NAME = 'hello-world-app'
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_STDOUT_CALLBACK = 'yaml'
    }
    
    stages {
        stage('Manual Approval') {
            steps {
                script {
                    def deploymentMessage = "Deploy to ${params.ENVIRONMENT} using Ansible?"
                    if (params.ENVIRONMENT == 'production') {
                        deploymentMessage = "⚠️ PRODUCTION DEPLOYMENT ⚠️\n\nAre you sure you want to deploy to PRODUCTION?\n\nBuild: ${params.BUILD_NUMBER_TO_DEPLOY ?: 'latest'}\nMethod: Ansible automation"
                    }
                    
                    def approver = input message: deploymentMessage,
                                        ok: "Deploy to ${params.ENVIRONMENT}",
                                        submitterParameter: 'APPROVER'
                    
                    env.DEPLOYMENT_APPROVER = approver ?: 'unknown'
                    
                    echo "Deployment approved by: ${env.DEPLOYMENT_APPROVER}"
                    echo "Deploying to: ${params.ENVIRONMENT}"
                    echo "Build to deploy: ${params.BUILD_NUMBER_TO_DEPLOY ?: 'latest'}"
                    echo "Server setup: ${params.SKIP_SERVER_SETUP ? 'Skip' : 'Run'}"
                    echo "Post-deploy action: ${params.POST_DEPLOY_ACTION}"
                }
            }
        }
        
        stage('Download Artifact') {
            steps {
                script {
                    cleanWs()
                    
                    def buildNumber = params.BUILD_NUMBER_TO_DEPLOY ?: ''
                    def ciJobName = 'hello-rails'
                    
                    echo "Downloading artifact from: ${ciJobName}"
                    
                    try {
                        if (buildNumber) {
                            step([$class: 'CopyArtifact',
                                  projectName: ciJobName,
                                  selector: [$class: 'SpecificBuildSelector', buildNumber: buildNumber],
                                  filter: 'hello-world-app-*.tar.gz',
                                  fingerprintArtifacts: true])
                        } else {
                            step([$class: 'CopyArtifact',
                                  projectName: ciJobName,
                                  selector: [$class: 'StatusBuildSelector', stable: false],
                                  filter: 'hello-world-app-*.tar.gz',
                                  fingerprintArtifacts: true])
                        }
                        
                        sh '''
                            if ls hello-world-app-*.tar.gz 1> /dev/null 2>&1; then
                                echo "✅ Artifact files found:"
                                ls -la hello-world-app-*.tar.gz
                            else
                                echo "❌ No artifact files found!"
                                exit 1
                            fi
                        '''
                        
                    } catch (Exception e) {
                        error("Failed to download artifact: ${e.message}")
                    }
                }
            }
        }
        
        stage('Setup Ansible Environment') {
            steps {
                script {
                    sh '''
                        # Find Ansible binary directly
                        echo "Locating Ansible installation..."
                        
                        # Check multiple possible locations
                        ANSIBLE_BINARY=""
                        POSSIBLE_PATHS=(
                            "/usr/local/bin/ansible"
                            "/opt/homebrew/bin/ansible"
                            "$HOME/Library/Python/3.9/bin/ansible"
                            "$HOME/.local/bin/ansible"
                        )
                        
                        for path in "${POSSIBLE_PATHS[@]}"; do
                            if [ -f "$path" ]; then
                                ANSIBLE_BINARY="$path"
                                echo "✅ Found Ansible at: $path"
                                break
                            fi
                        done
                        
                        # If not found, try to install via Homebrew
                        if [ -z "$ANSIBLE_BINARY" ]; then
                            echo "Installing Ansible via Homebrew..."
                            if command -v brew &> /dev/null; then
                                brew install ansible
                                ANSIBLE_BINARY="/usr/local/bin/ansible"
                            else
                                echo "❌ No Ansible found and Homebrew not available"
                                exit 1
                            fi
                        fi
                        
                        # Test Ansible with direct path
                        echo "Testing Ansible..."
                        $ANSIBLE_BINARY --version
                        
                        # Store the path for later stages
                        echo "$ANSIBLE_BINARY" > /tmp/ansible_path
                        echo "ANSIBLE_DIR=$(dirname $ANSIBLE_BINARY)" > /tmp/ansible_env
                        
                        # Check if ansible directory exists
                        if [ ! -d "ansible" ]; then
                            echo "❌ Ansible directory not found!"
                            echo "Please ensure ansible/ directory exists in your repository"
                            exit 1
                        fi
                        
                        echo "✅ Ansible environment verified"
                    '''
                }
            }
        }
        
        stage('Prepare Deployment') {
            steps {
                script {
                    sh '''
                        # Get artifact info
                        ARTIFACT_FILE=$(ls hello-world-app-*.tar.gz | head -1)
                        BUILD_NUM=$(echo $ARTIFACT_FILE | sed 's/hello-world-app-//; s/.tar.gz//')
                        
                        echo "Artifact: $ARTIFACT_FILE"
                        echo "Build number: $BUILD_NUM"
                        
                        # Copy artifact to /tmp for Ansible
                        cp $ARTIFACT_FILE /tmp/hello-world-app-${BUILD_NUM}.tar.gz
                        
                        # Create ansible variables file
                        cat > ansible/extra_vars.yml << EOF
build_number: ${BUILD_NUM}
app_archive_path: /tmp/hello-world-app-${BUILD_NUM}.tar.gz
environment: ${ENVIRONMENT}
deployed_by: ${DEPLOYMENT_APPROVER}
deployed_at: $(date)
EOF
                        
                        echo "=== Deployment Variables ==="
                        cat ansible/extra_vars.yml
                    '''
                }
            }
        }
        
        stage('Test Ansible Connectivity') {
            steps {
                script {
                    dir('ansible') {
                        sh '''
                            # Load Ansible path
                            source /tmp/ansible_env
                            ANSIBLE_BINARY=$(cat /tmp/ansible_path)
                            
                            echo "Testing Ansible connectivity..."
                            echo "Using Ansible binary: $ANSIBLE_BINARY"
                            echo "Using inventory: inventories/${ENVIRONMENT}/hosts"
                            
                            # Test ping with direct binary path
                            $ANSIBLE_BINARY -i inventories/${ENVIRONMENT}/hosts webservers -m ping
                            
                            if [ $? -eq 0 ]; then
                                echo "✅ Ansible connectivity test passed"
                            else
                                echo "❌ Ansible connectivity test failed"
                                echo "Debugging information:"
                                echo "Current directory: $(pwd)"
                                echo "Inventory file contents:"
                                cat inventories/${ENVIRONMENT}/hosts
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Server Setup') {
            when {
                expression { !params.SKIP_SERVER_SETUP }
            }
            steps {
                script {
                    dir('ansible') {
                        sh '''
                            # Set up PATH for Ansible
                            export PATH="$HOME/Library/Python/3.9/bin:$HOME/.local/bin:/usr/local/bin:$PATH"
                            
                            echo "Running initial server setup..."
                            ansible-playbook -i inventories/${ENVIRONMENT}/hosts playbooks/setup-server.yml -v
                            
                            if [ $? -eq 0 ]; then
                                echo "✅ Server setup completed successfully"
                            else
                                echo "❌ Server setup failed"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Deploy with Ansible') {
            steps {
                script {
                    dir('ansible') {
                        sh '''
                            # Load Ansible path
                            source /tmp/ansible_env
                            ANSIBLE_BINARY=$(cat /tmp/ansible_path)
                            ANSIBLE_PLAYBOOK_BINARY="$(dirname $ANSIBLE_BINARY)/ansible-playbook"
                            
                            echo "Starting Ansible deployment..."
                            echo "Environment: ${ENVIRONMENT}"
                            echo "Using binary: $ANSIBLE_PLAYBOOK_BINARY"
                            echo "Deploying artifact: $(cat extra_vars.yml | grep app_archive_path)"
                            
                            # Run deployment playbook with direct binary path
                            $ANSIBLE_PLAYBOOK_BINARY -i inventories/${ENVIRONMENT}/hosts playbooks/deploy.yml \
                                --extra-vars @extra_vars.yml \
                                -v
                            
                            if [ $? -eq 0 ]; then
                                echo "✅ Ansible deployment completed successfully"
                            else
                                echo "❌ Ansible deployment failed"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Post-Deployment Verification') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                    ]) {
                        sh '''
                            echo "Performing post-deployment verification..."
                            
                            # Wait for application to start
                            sleep 15
                            
                            # Health check
                            MAX_RETRIES=12
                            RETRY_COUNT=0
                            
                            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                                echo "Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
                                
                                if curl -f -s -o /dev/null http://${EC2_HOST}:3000/health || curl -f -s -o /dev/null http://${EC2_HOST}:3000/; then
                                    echo "✅ Application is responding!"
                                    break
                                else
                                    echo "⏳ Application not ready, retrying in 10 seconds..."
                                    sleep 10
                                    RETRY_COUNT=$((RETRY_COUNT + 1))
                                fi
                            done
                            
                            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                                echo "❌ Health check failed after $MAX_RETRIES attempts"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Create User') {
            when {
                expression { params.POST_DEPLOY_ACTION == 'create_user' }
            }
            steps {
                script {
                    def userChoice = input(
                        message: 'Create new user on server?',
                        parameters: [
                            string(name: 'USERNAME', description: 'Enter username', defaultValue: ''),
                            choice(name: 'ACCESS_LEVEL', choices: ['1', '2', '3'], description: '1=Admin (full access), 2=Operations (no delete), 3=Read-only'),
                            booleanParam(name: 'COPY_SSH_KEY', defaultValue: false, description: 'Copy SSH key from deploy user?')
                        ]
                    )
                    
                    if (userChoice.USERNAME) {
                        dir('ansible') {
                            sh """
                                echo "Creating user: ${userChoice.USERNAME}"
                                echo "Access level: ${userChoice.ACCESS_LEVEL}"
                                echo "Copy SSH: ${userChoice.COPY_SSH_KEY}"
                                
                                # Create user variables file
                                cat > user_vars.yml << EOF
new_username: ${userChoice.USERNAME}
user_access_level: ${userChoice.ACCESS_LEVEL}
copy_ssh_key: ${userChoice.COPY_SSH_KEY}
EOF
                                
                                # Run user creation playbook
                                ansible-playbook -i inventories/${ENVIRONMENT}/hosts playbooks/create-user.yml \
                                    --extra-vars @user_vars.yml \
                                    -v
                            """
                        }
                    } else {
                        echo "No username provided, skipping user creation"
                    }
                }
            }
        }
        
        stage('Deployment Summary') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: "ec2-${params.ENVIRONMENT}-host", variable: 'EC2_HOST')
                    ]) {
                        sh '''
                            echo "
🎉 Ansible Deployment Summary
================================
Environment: ${ENVIRONMENT}
Server: ${EC2_HOST}
Approved by: ${DEPLOYMENT_APPROVER}
Build: ${BUILD_NUMBER_TO_DEPLOY:-latest}
Method: Ansible automation
Application URL: http://${EC2_HOST}:3000
Deployment time: $(date)
================================

📋 Available Access Levels:
1. Admin: Full system access
2. Operations: Can read/write but not delete
3. Read-only: View files only

🔗 SSH Access: ssh <username>@${EC2_HOST}
                            "
                        '''
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "✅ Ansible deployment to ${params.ENVIRONMENT} completed successfully!"
            
            script {
                try {
                    withCredentials([
                        string(credentialsId: 'slack-webhook-url', variable: 'SLACK_WEBHOOK')
                    ]) {
                        sh '''
                            curl -X POST -H 'Content-type: application/json' \
                                --data '{"text":"✅ Ansible Deployment Success: '${APP_NAME}' to '${ENVIRONMENT}' - Build #'${BUILD_NUMBER}' (by '${DEPLOYMENT_APPROVER}')"}' \
                                $SLACK_WEBHOOK
                        '''
                    }
                } catch (Exception e) {
                    echo "Notification failed: ${e.message}"
                }
            }
        }
        
        failure {
            echo "❌ Ansible deployment to ${params.ENVIRONMENT} failed!"
            
            script {
                try {
                    withCredentials([
                        string(credentialsId: 'slack-webhook-url', variable: 'SLACK_WEBHOOK')
                    ]) {
                        sh '''
                            curl -X POST -H 'Content-type: application/json' \
                                --data '{"text":"❌ Ansible Deployment Failed: '${APP_NAME}' to '${ENVIRONMENT}' - Build #'${BUILD_NUMBER}' (by '${DEPLOYMENT_APPROVER}')"}' \
                                $SLACK_WEBHOOK
                        '''
                    }
                } catch (Exception e) {
                    echo "Failed notification: ${e.message}"
                }
            }
        }
        
        always {
            script {
                sh '''
                    rm -f hello-world-app-*.tar.gz
                    rm -f ansible/extra_vars.yml
                    rm -f ansible/user_vars.yml
                '''
            }
            cleanWs()
        }
    }
}