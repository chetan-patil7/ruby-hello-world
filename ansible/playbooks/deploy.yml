---
- name: Deploy Application
  hosts: webservers
  become: yes
  vars:
    app_archive_path: "/tmp/{{ app_name }}-{{ build_number | default('latest') }}.tar.gz"
  
  tasks:
    - name: Ensure directories exist
      file:
        path: "{{ deploy_path }}/{{ rails_env }}/current"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0755'

    - name: Extract and deploy application
      unarchive:
        src: "{{ app_archive_path }}"
        dest: "{{ deploy_path }}/{{ rails_env }}/current"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        remote_src: yes
        creates: "{{ deploy_path }}/{{ rails_env }}/current/Gemfile"

    - name: Stop any existing servers
      shell: |
        pkill -f 'python.*http.server' || true
        pkill -f 'rails server' || true
        pkill -f 'ruby.*server' || true
        sleep 2
      become_user: "{{ deploy_user }}"
      ignore_errors: yes

    - name: Check if Rails app exists
      stat:
        path: "{{ deploy_path }}/{{ rails_env }}/current/Gemfile"
      register: rails_app

    - name: Start Rails UI server
      shell: |
        cd {{ deploy_path }}/{{ rails_env }}/current

        echo "Setting Rails environment..."
        export RAILS_ENV=development
        export SECRET_KEY_BASE=$(bundle exec rails secret)

        echo "Stopping existing servers..."
        pkill -f 'python.*http.server' || true
        pkill -f 'rails server' || true
        sleep 2

        echo "Running DB migrations..."
        bundle install
        yarn install --check-files || true
        bundle exec rails db:migrate

        echo "Starting Rails server..."
        nohup bundle exec rails server -e development -p 3000 -b 0.0.0.0 > /tmp/rails.log 2>&1 &
        sleep 5
      become_user: "{{ deploy_user }}"
      ignore_errors: yes

      
    - name: Wait for server to start
      pause:
        seconds: 5

    - name: Check if server is responding
      uri:
        url: "http://{{ ansible_host }}:3000"
        method: GET
        status_code: [200, 302, 404]
        timeout: 10
      register: server_check
      ignore_errors: yes
      delegate_to: localhost

    - name: Display server status
      debug:
        msg: |
          Server Status: {{ 'Running' if server_check is succeeded else 'Check logs on server' }}
          URL: http://{{ ansible_host }}:3000
          Log files: /tmp/rails.log, /tmp/ruby_server.log, /tmp/python_server.log
          
    - name: Display deployment success
      debug:
        msg: |
          ðŸŽ‰ Deployment completed!
          Server: {{ ansible_host }}:3000
          Application: {{ deploy_path }}/{{ rails_env }}/current
          Check server logs if needed: ssh {{ deploy_user }}@{{ ansible_host }} "tail -f /tmp/*.log"