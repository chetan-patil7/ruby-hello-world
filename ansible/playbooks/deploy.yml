---
- name: Deploy Application
  hosts: webservers
  become: yes
  vars:
    app_archive_path: "/tmp/{{ app_name }}-{{ build_number | default('latest') }}.tar.gz"
  
  tasks:
    - name: Ensure directories exist
      file:
        path: "{{ deploy_path }}/{{ rails_env }}/current"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0755'

    - name: Extract and deploy application
      unarchive:
        src: "{{ app_archive_path }}"
        dest: "{{ deploy_path }}/{{ rails_env }}/current"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        remote_src: yes
        creates: "{{ deploy_path }}/{{ rails_env }}/current/Gemfile"

    - name: Stop any existing servers
      shell: |
        pkill -f 'python.*http.server' || true
        pkill -f 'rails server' || true
        pkill -f 'ruby.*server' || true
        sleep 2
      become_user: "{{ deploy_user }}"
      ignore_errors: yes

    - name: Check if Rails app exists
      stat:
        path: "{{ deploy_path }}/{{ rails_env }}/current/Gemfile"
      register: rails_app

    - name: Try to start Rails server
      shell: |
        cd {{ deploy_path }}/{{ rails_env }}/current
        export PATH="/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:$PATH"
        eval "$(rbenv init - 2>/dev/null)" || true
        
        # Try bundle exec rails server
        if command -v bundle >/dev/null 2>&1 && [ -f Gemfile ]; then
          echo "Starting Rails server with bundle..."
          nohup bundle exec rails server -e {{ rails_env }} -p 3000 -b 0.0.0.0 > /tmp/rails.log 2>&1 &
          echo $! > /tmp/rails.pid
        elif command -v ruby >/dev/null 2>&1; then
          echo "Starting Ruby HTTP server..."
          nohup ruby -run -e httpd . -p 3000 > /tmp/ruby_server.log 2>&1 &
          echo $! > /tmp/ruby.pid
        else
          echo "Starting Python HTTP server..."
          nohup python3 -m http.server 3000 > /tmp/python_server.log 2>&1 &
          echo $! > /tmp/python.pid
        fi
        
        sleep 3
        echo "Server startup command completed"
      become_user: "{{ deploy_user }}"
      async: 45
      poll: 0
      
    - name: Wait for server to start
      pause:
        seconds: 5

    - name: Check if server is responding
      uri:
        url: "http://{{ ansible_host }}:3000"
        method: GET
        status_code: [200, 302, 404]
        timeout: 10
      register: server_check
      ignore_errors: yes
      delegate_to: localhost

    - name: Display server status
      debug:
        msg: |
          Server Status: {{ 'Running' if server_check is succeeded else 'Check logs on server' }}
          URL: http://{{ ansible_host }}:3000
          Log files: /tmp/rails.log, /tmp/ruby_server.log, /tmp/python_server.log
          
    - name: Display deployment success
      debug:
        msg: |
          ðŸŽ‰ Deployment completed!
          Server: {{ ansible_host }}:3000
          Application: {{ deploy_path }}/{{ rails_env }}/current
          Check server logs if needed: ssh {{ deploy_user }}@{{ ansible_host }} "tail -f /tmp/*.log"