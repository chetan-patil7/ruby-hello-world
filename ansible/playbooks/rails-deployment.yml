---
- name: Deploy Rails Application
  hosts: webservers
  become: yes
  vars:
    app_archive_path: "/tmp/{{ app_name }}-{{ build_number | default('latest') }}.tar.gz"

  tasks:
    - name: Upload application artifact
      shell: |
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no "{{ local_artifact_path }}" deploy@{{ ansible_host }}:/tmp/{{ app_name }}-{{ build_number }}.tar.gz
      delegate_to: localhost
      become: no

    - name: Create deployment directories
      file:
        path: "{{ deploy_path }}/{{ rails_env }}/current"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0755'

    - name: Extract application
      unarchive:
        src: "{{ app_archive_path }}"
        dest: "{{ deploy_path }}/{{ rails_env }}/current"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        remote_src: yes

    - name: Install Ruby dependencies
      shell: |
        cd {{ deploy_path }}/{{ rails_env }}/current
        
        export PATH="/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:$PATH"
        eval "$(rbenv init -)"
        
        echo "Installing Ruby dependencies..."
        bundle install --without development test
        
        echo "Ruby dependencies installed"
      become_user: "{{ deploy_user }}"
      environment:
        PATH: "/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:{{ ansible_env.PATH }}"
      args:
        executable: /bin/bash

    - name: Configure Rails environment
      shell: |
        cd {{ deploy_path }}/{{ rails_env }}/current
        
        echo "Configuring Rails environment..."
        
        if [ ! -f "config/environments/{{ rails_env }}.rb" ]; then
          echo "Creating {{ rails_env }}.rb environment file..."
          cp config/environments/development.rb config/environments/{{ rails_env }}.rb
        fi
        
        if grep -q "config.eager_load.*nil" config/environments/{{ rails_env }}.rb; then
          echo "Fixing eager_load configuration..."
          sed -i 's/config.eager_load.*=.*nil/config.eager_load = false/' config/environments/{{ rails_env }}.rb
        fi
        
        if ! grep -q "config.eager_load" config/environments/{{ rails_env }}.rb; then
          echo "Adding eager_load configuration..."
          echo "  config.eager_load = false" >> config/environments/{{ rails_env }}.rb
        fi
        
        echo "Configuring database for {{ rails_env }} environment..."
        
        if ! grep -q "^{{ rails_env }}:" config/database.yml; then
          echo "Adding {{ rails_env }} database configuration..."
          echo "" >> config/database.yml
          echo "{{ rails_env }}:" >> config/database.yml
          echo "  <<: *default" >> config/database.yml
          echo "  database: {{ database_name }}" >> config/database.yml
          echo "  username: {{ database_user }}" >> config/database.yml
          echo "  password: {{ database_password }}" >> config/database.yml
          echo "  host: localhost" >> config/database.yml
        fi
        
        echo "Rails environment configured"
      become_user: "{{ deploy_user }}"
      args:
        executable: /bin/bash

    - name: Database operations
      shell: |
        cd {{ deploy_path }}/{{ rails_env }}/current
        
        export PATH="/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:$PATH"
        eval "$(rbenv init -)"
        export RAILS_ENV={{ rails_env }}
        export SECRET_KEY_BASE=$(bundle exec rails secret)
        
        echo "Setting up database..."
        echo "Environment: $RAILS_ENV"
        echo "Secret key base generated successfully"
        
        RAILS_ENV={{ rails_env }} SECRET_KEY_BASE=$SECRET_KEY_BASE bundle exec rake db:create 2>/dev/null || echo "Database already exists"
        RAILS_ENV={{ rails_env }} SECRET_KEY_BASE=$SECRET_KEY_BASE bundle exec rake db:migrate
        
        if [ -d "app/assets" ]; then
          RAILS_ENV={{ rails_env }} SECRET_KEY_BASE=$SECRET_KEY_BASE bundle exec rake assets:precompile
        fi
        
        echo "Database operations completed"
      become_user: "{{ deploy_user }}"
      environment:
        PATH: "/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:{{ ansible_env.PATH }}"
        RAILS_ENV: "{{ rails_env }}"
      args:
        executable: /bin/bash

    - name: Stop existing servers
      shell: |
        echo "Stopping existing servers..."
        
        killall -TERM python3 2>/dev/null || true
        killall -TERM python 2>/dev/null || true
        killall -TERM ruby 2>/dev/null || true
        
        sleep 2
        
        killall -KILL python3 2>/dev/null || true
        killall -KILL python 2>/dev/null || true
        killall -KILL ruby 2>/dev/null || true
        
        echo "Existing servers stopped"
      become_user: "{{ deploy_user }}"
      args:
        executable: /bin/bash
      ignore_errors: yes

    - name: Start Rails Server
      shell: |
        cd {{ deploy_path }}/{{ rails_env }}/current
        
        export PATH="/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:$PATH"
        eval "$(rbenv init -)"
        
        export RAILS_ENV={{ rails_env }}
        export SECRET_KEY_BASE=$(bundle exec rails secret)
        
        echo "Starting Rails server..."
        echo "Environment: $RAILS_ENV"
        
        mkdir -p log tmp/pids
        
        setsid nohup bundle exec rails server -e {{ rails_env }} -p 3000 -b 0.0.0.0 </dev/null >log/rails.log 2>&1 &
        
        RAILS_PID=$!
        echo $RAILS_PID > tmp/pids/server.pid
        
        echo "Rails server started in background"
        echo "Process ID: $RAILS_PID"
        
        sleep 20
        
        if kill -0 $RAILS_PID 2>/dev/null; then
          echo "Rails server process is still running"
        else
          echo "Rails server process died, checking logs:"
          tail -30 log/rails.log
          exit 1
        fi
        
        if ss -tlnp | grep :3000 || lsof -i :3000 || curl -s -o /dev/null http://localhost:3000; then
          echo "Rails server is listening on port 3000"
          echo "Server accessible at: http://{{ ansible_host }}:3000"
        else
          echo "Rails server not listening on port 3000"
          echo "Checking logs:"
          tail -30 log/rails.log
          exit 1
        fi
      become_user: "{{ deploy_user }}"
      environment:
        PATH: "/home/{{ deploy_user }}/.rbenv/bin:/home/{{ deploy_user }}/.rbenv/shims:{{ ansible_env.PATH }}"
      args:
        executable: /bin/bash

    - name: Verify deployment
      shell: |
        cd {{ deploy_path }}/{{ rails_env }}/current
        
        echo "VERIFYING RAILS DEPLOYMENT"
        echo "=========================="
        
        if ps aux | grep -v grep | grep 'rails server'; then
          echo "Rails server process running"
        fi
        
        sleep 5
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 || echo "000")
        if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "404" ] || [ "$HTTP_CODE" = "500" ]; then
          echo "Rails application responding (HTTP $HTTP_CODE)"
        else
          echo "Rails application might still be starting (HTTP $HTTP_CODE)"
        fi
        
        echo ""
        echo "Deployment Summary:"
        echo "Environment: {{ rails_env }}"
        echo "Application Path: {{ deploy_path }}/{{ rails_env }}/current"
        echo "Access URL: http://{{ ansible_host }}:3000"
        echo "Log File: {{ deploy_path }}/{{ rails_env }}/current/log/rails.log"
      become_user: "{{ deploy_user }}"
      ignore_errors: yes
      args:
        executable: /bin/bash

    - name: Deployment success
      debug:
        msg: |
          üéâ RAILS APPLICATION DEPLOYMENT SUCCESS! üéâ
          
          üöÄ Your Rails application is now running!
          üåç Access: http://{{ ansible_host }}:3000/
          üìù Logs: {{ deploy_path }}/{{ rails_env }}/current/log/rails.log
          
          Server Details:
          ‚úÖ Environment: {{ rails_env }}
          ‚úÖ Rails server running on port 3000
          ‚úÖ Database migrations completed
          ‚úÖ Assets precompiled
          ‚úÖ Secret key base generated