pipeline {
    agent any

    environment {
        DEV1_BRANCH = 'dev1'
        DEV2_BRANCH = 'dev2'
        DEV3_BRANCH = 'dev3'
        STAGING1_BRANCH = 'staging1'

        ANSIBLE_PLAYBOOK = 'ansible/deploy.yml'
        ANSIBLE_VAULT_PASSWORD_ID = 'ansible_vault_password'
    }

    stages {
        stage('Checkout & Branch Detection') {
            steps {
                checkout scm
                script {
                    if (env.BRANCH_NAME) {
                        env.DETECTED_BRANCH = env.BRANCH_NAME
                    } else if (env.GIT_BRANCH) {
                        env.DETECTED_BRANCH = env.GIT_BRANCH.replaceFirst(/^origin\//, '')
                    } else {
                        def branchName = sh(
                            script: "git branch -r --contains HEAD | grep origin | head -1 | sed 's/.*origin\\///'",
                            returnStdout: true
                        ).trim()
                        env.DETECTED_BRANCH = branchName
                    }

                    echo "‚úÖ Detected branch: ${env.DETECTED_BRANCH}"
                }
            }
        }

        stage('Determine Target Server & Vault Group') {
            steps {
                script {
                    switch(env.DETECTED_BRANCH) {
                        case DEV1_BRANCH:
                            env.TARGET_SERVER = 'dev1-server'
                            env.RAILS_ENV = 'development1'
                            env.ANSIBLE_LIMIT = 'dev1_servers'
                            env.ANSIBLE_INVENTORY = 'inventory/dev/hosts'
                            break
                        case DEV2_BRANCH:
                            env.TARGET_SERVER = 'dev2-server'
                            env.RAILS_ENV = 'development2'
                            env.ANSIBLE_LIMIT = 'dev2_servers'
                            env.ANSIBLE_INVENTORY = 'inventory/dev/hosts'
                            break
                        case DEV3_BRANCH:
                            env.TARGET_SERVER = 'dev3-server'
                            env.RAILS_ENV = 'development3'
                            env.ANSIBLE_LIMIT = 'dev3_servers'
                            env.ANSIBLE_INVENTORY = 'inventory/dev/hosts'
                            break
                        case STAGING1_BRANCH:
                            env.TARGET_SERVER = 'staging1-server'
                            env.RAILS_ENV = 'staging1'
                            env.ANSIBLE_LIMIT = 'staging1_servers'
                            env.ANSIBLE_INVENTORY = 'inventory/staging/hosts'
                            break
                        default:
                            error("‚ùå Branch '${env.DETECTED_BRANCH}' is not configured for deployment.")
                    }

                    echo "üöÄ Deployment Configuration:"
                    echo "Branch: ${env.DETECTED_BRANCH}"
                    echo "Target server: ${env.TARGET_SERVER}"
                    echo "Rails environment: ${env.RAILS_ENV}"
                }
            }
        }

        stage('Build & Test') {
            steps {
                script {
                    echo "üß™ Running tests for ${env.DETECTED_BRANCH}"
                    // Add your tests here
                }
            }
        }

        stage('Deploy with Ansible & Vault') {
            steps {
                withCredentials([
                    string(credentialsId: "${env.ANSIBLE_VAULT_PASSWORD_ID}", variable: 'VAULT_PASSWORD')
                ]) {
                    script {
                        writeFile file: 'vault_pass.txt', text: VAULT_PASSWORD

                        echo "üîê Using Ansible Vault to decrypt sensitive vars"

                        // IMPORTANT: This is a shell command, NOT the ansiblePlaybook plugin
                        sh """
                            # Add all possible Ansible paths to PATH
                            export PATH="/Users/abcom/Library/Python/3.9/bin:/opt/homebrew/bin:/usr/local/bin:\$PATH"
                            
                            # Debug: Show what's available
                            echo "üîç Debugging Ansible installation:"
                            echo "Current PATH: \$PATH"
                            echo "Looking for ansible-playbook..."
                            which ansible-playbook || echo "ansible-playbook not found"
                            
                            # Try to find and use ansible-playbook
                            if command -v ansible-playbook >/dev/null 2>&1; then
                                echo "‚úÖ Found ansible-playbook: \$(which ansible-playbook)"
                                ansible-playbook --version
                                
                                # Run the deployment
                                ansible-playbook -i ${env.ANSIBLE_INVENTORY} \
                                                 --limit ${env.ANSIBLE_LIMIT} \
                                                 --extra-vars "rails_env=${env.RAILS_ENV} branch_name=${env.DETECTED_BRANCH}" \
                                                 --vault-password-file vault_pass.txt \
                                                 ${env.ANSIBLE_PLAYBOOK}
                            else
                                echo "‚ùå ansible-playbook still not found after PATH update"
                                echo "Let's check what's in the Python bin directory:"
                                ls -la /Users/abcom/Library/Python/3.9/bin/ || echo "Directory doesn't exist"
                                echo "Let's check Homebrew locations:"
                                ls -la /opt/homebrew/bin/ansible* 2>/dev/null || echo "No Homebrew ansible"
                                ls -la /usr/local/bin/ansible* 2>/dev/null || echo "No /usr/local ansible"
                                exit 1
                            fi
                        """

                        sh "rm -f vault_pass.txt"
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                echo "‚úÖ SUCCESS: Branch '${env.DETECTED_BRANCH}' deployed to ${env.TARGET_SERVER}"
            }
        }
        failure {
            script {
                echo "‚ùå FAILED: Deployment of '${env.DETECTED_BRANCH}' to ${env.TARGET_SERVER} failed"
            }
        }
        always {
            cleanWs()
        }
    }
}