pipeline {
    agent any

    environment {
        DEV1_BRANCH = 'dev1'
        DEV2_BRANCH = 'dev2'
        DEV3_BRANCH = 'dev3'
        STAGING1_BRANCH = 'staging1'

        ANSIBLE_PLAYBOOK = 'ansible/deploy.yml'
        ANSIBLE_VAULT_PASSWORD_ID = 'ansible_vault_password'
    }

    stages {
        stage('Checkout & Branch Detection') {
            steps {
                checkout scm
                script {
                    if (env.BRANCH_NAME) {
                        env.DETECTED_BRANCH = env.BRANCH_NAME
                    } else if (env.GIT_BRANCH) {
                        env.DETECTED_BRANCH = env.GIT_BRANCH.replaceFirst(/^origin\//, '')
                    } else {
                        def branchName = sh(
                            script: "git branch -r --contains HEAD | grep origin | head -1 | sed 's/.*origin\\///'",
                            returnStdout: true
                        ).trim()
                        env.DETECTED_BRANCH = branchName
                    }

                    echo "‚úÖ Detected branch: ${env.DETECTED_BRANCH}"
                }
            }
        }

        stage('Determine Target Server & Vault Group') {
            steps {
                script {
                    switch(env.DETECTED_BRANCH) {
                        case DEV1_BRANCH:
                            env.TARGET_SERVER = 'dev1-server'
                            env.RAILS_ENV = 'development1'
                            env.ANSIBLE_LIMIT = 'dev1_servers'
                            env.ANSIBLE_INVENTORY = 'ansible/inventory/dev/hosts'
                            break
                        case DEV2_BRANCH:
                            env.TARGET_SERVER = 'dev2-server'
                            env.RAILS_ENV = 'development2'
                            env.ANSIBLE_LIMIT = 'dev2_servers'
                            env.ANSIBLE_INVENTORY = 'ansible/inventory/dev/hosts'
                            break
                        case DEV3_BRANCH:
                            env.TARGET_SERVER = 'dev3-server'
                            env.RAILS_ENV = 'development3'
                            env.ANSIBLE_LIMIT = 'dev3_servers'
                            env.ANSIBLE_INVENTORY = 'ansible/inventory/dev/hosts'
                            break
                        case STAGING1_BRANCH:
                            env.TARGET_SERVER = 'staging1-server'
                            env.RAILS_ENV = 'staging1'
                            env.ANSIBLE_LIMIT = 'staging1_servers'
                            env.ANSIBLE_INVENTORY = 'ansible/inventory/staging/hosts'
                            break
                        default:
                            error("‚ùå Branch '${env.DETECTED_BRANCH}' is not configured for deployment.")
                    }

                    echo "üöÄ Deployment Configuration:"
                    echo "Branch: ${env.DETECTED_BRANCH}"
                    echo "Target server: ${env.TARGET_SERVER}"
                    echo "Rails environment: ${env.RAILS_ENV}"
                }
            }
        }

        stage('Build & Test') {
            steps {
                script {
                    echo "üß™ Running tests for ${env.DETECTED_BRANCH}"
                    // Add your tests here
                }
            }
        }

        // stage('Debug Inventory') {
        //     steps {
        //         script {
        //             echo "üîç Checking inventory files..."
        //             sh """
        //                 echo "Current directory: \$(pwd)"
        //                 echo "Directory structure:"
        //                 find . -name "*.yml" -o -name "hosts" -o -name "inventory" | head -20
                        
        //                 echo "\\nüìÅ Looking for inventory directory:"
        //                 ls -la inventory/ || echo "‚ùå inventory/ directory not found"
                        
        //                 echo "\\nüìÅ Looking for staging inventory:"
        //                 ls -la inventory/staging/ || echo "‚ùå inventory/staging/ directory not found"
                        
        //                 echo "\\nüìÑ Checking hosts file:"
        //                 ls -la ${env.ANSIBLE_INVENTORY} || echo "‚ùå ${env.ANSIBLE_INVENTORY} not found"
                        
        //                 if [ -f "${env.ANSIBLE_INVENTORY}" ]; then
        //                     echo "\\nüìñ Content of ${env.ANSIBLE_INVENTORY}:"
        //                     cat ${env.ANSIBLE_INVENTORY}
        //                 fi
        //             """
        //         }
        //     }
        // }

        stage('Deploy with Ansible & Vault') {
            steps {
                withCredentials([
                    string(credentialsId: "${env.ANSIBLE_VAULT_PASSWORD_ID}", variable: 'VAULT_PASSWORD')
                ]) {
                    script {
                        writeFile file: 'vault_pass.txt', text: VAULT_PASSWORD

                        echo "üîê Using Ansible Vault to decrypt sensitive vars"

                        // IMPORTANT: This is a shell command, NOT the ansiblePlaybook plugin
//                         sh """
//                             # Add all possible Ansible paths to PATH
//                             export PATH="/Users/abcom/Library/Python/3.9/bin:/opt/homebrew/bin:/usr/local/bin:\$PATH"
                            
//                             # Verify inventory file exists and show its content
//                             if [ ! -f "${env.ANSIBLE_INVENTORY}" ]; then
//                                 echo "‚ùå Inventory file not found: ${env.ANSIBLE_INVENTORY}"
//                                 echo "Available files in inventory directory:"
//                                 find inventory/ -type f 2>/dev/null || echo "No inventory directory found"
//                                 exit 1
//                             fi
                            
//                             echo "‚úÖ Found inventory file: ${env.ANSIBLE_INVENTORY}"
//                             echo "üìñ Raw inventory content:"
//                             cat -A ${env.ANSIBLE_INVENTORY}  # Show hidden characters
//                             echo "\\nüìñ Normal inventory content:"
//                             cat ${env.ANSIBLE_INVENTORY}
                            
//                             # Test inventory parsing with detailed output
//                             echo "\\nüß™ Testing inventory parsing:"
//                             ansible-inventory -i ${env.ANSIBLE_INVENTORY} --list -v || {
//                                 echo "‚ùå Inventory parsing failed"
//                                 echo "\\nTrying to validate syntax:"
//                                 python3 -c "
// import configparser
// try:
//     config = configparser.ConfigParser(allow_no_value=True)
//     config.read('${env.ANSIBLE_INVENTORY}')
//     print('‚úÖ INI syntax is valid')
//     for section in config.sections():
//         print(f'Section: [{section}]')
//         for key, value in config.items(section):
//             print(f'  {key} = {value}')
// except Exception as e:
//     print(f'‚ùå INI syntax error: {e}')
//                                 "
//                                 exit 1
//                             }
                            
                            # Check if the group exists
                            echo "\\nüîç Checking for staging1_servers group:"
                            ansible-inventory -i ${env.ANSIBLE_INVENTORY} --graph
                            
                            # Run the deployment
                            echo "\\nüöÄ Running deployment:"
                            ansible-playbook -i ${env.ANSIBLE_INVENTORY} \
                                             --limit ${env.ANSIBLE_LIMIT} \
                                             --extra-vars "rails_env=${env.RAILS_ENV} branch_name=${env.DETECTED_BRANCH}" \
                                             --vault-password-file vault_pass.txt \
                                             -v \
                                             ${env.ANSIBLE_PLAYBOOK}
                        """

                        sh "rm -f vault_pass.txt"
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                echo "‚úÖ SUCCESS: Branch '${env.DETECTED_BRANCH}' deployed to ${env.TARGET_SERVER}"
            }
        }
        failure {
            script {
                echo "‚ùå FAILED: Deployment of '${env.DETECTED_BRANCH}' to ${env.TARGET_SERVER} failed"
            }
        }
        always {
            cleanWs()
        }
    }
}